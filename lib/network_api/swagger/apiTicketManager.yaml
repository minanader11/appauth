swagger: '2.0'
info:
  version: 0.0.41
  description: "## API for Ticket Manager module.\n\nThese APIs need the authentication,
    so every request must contains at least these 2 mandatory HTTP header:\n
    1. *Authorization*: the Bearer token generated by WSO2 after the login\n
    2. *X-WTF-PROFILE*: the profile chosen by the user"

  title: TCI Interactive Ticket Manager
host: WSO2_ENDPOINT
basePath: /es/interactive-ticket-manager
tags:
  - name: Wallet
  - name: Ticket & List
  - name: Fare Product & Sales Package
  - name: Device
  - name: Issuing/Validation Transaction
  - name: Purchase Transaction
  - name: Purchase Refund
  - name: Change Compensation
  - name: Account Based
  - name: Extended Distance Matrix
  - name: Electronic Purse
  - name: Transactions
  - name: Fines Management
  - name: SaleEngine

schemes:
  - https
paths:
  /pop:
    get:
      tags:
        - Issuing/Validation Transaction
      summary: Retrieve Proof Of Purchase.
      description: |
        <i>DESCRIPTION</i>
        The TCI Service searches and returns the detailed information relating to the purchase receipt (proof of purchase) of an interest Ticket

        <i>FLOW</i>
        *  The channel invokes the service by providing input to the ticket identifier (<b>ticketId</b>)
        *  The Service invokes the appropriate service of IHB (CUA) <b>GET / tickets/{ticketId}</b> to verify the existence of the ticket and retrieve the information necessary for the creation of the proof of purchase
        *  The Service returns to the Channel the detailed information relating to the proof of purchase

        <i>SPECIFICS AND CONTROLS</i>
        *  checks that the call is present the required parameter <b>ticketId</b>
        *  Check that proof of purchase data exists for the set identifier

      operationId: getProofOfPurchase
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ticketId
          in: query
          required: true
          description: Unique identification of ticket.
          type: string
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/ProofOfPurchase'
        '404':
          description: Proof of purchase not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /users/{userId}/hceDevices:
    post:
      tags:
        - Device
      summary: Notify HCE device registration.
      description: |
        <i>DESCRIPTION</i>
        The TCI service notify about a new HCE device registered for a certain user

        <i>FLOW</i>
        *  The HCE Channel requires  to register a Customer's device providing all the necessary info
        *  The public service on the topic "queuing.mms.in.media.v1" The request of type "create" and notifies the channel HCE the taking charge of the request
        *  Asynchronously the MediaLifeCycle (MLC) reads the message from the topic and creates the media and publishes it on topic "queuing.mms. out.media.v1"

        <i>SPECIFICS AND CONTROLS</i>
        *  Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        *  Checks the equality of the userId in the call to the service and  input body
        *  The invocation to the topic "queuing.mms.in.media.v1" uses the deviceId, if present in the body, as mediaId
        *  If the blackListdate is valued, a LOCK-type request must also be created to the topic Kafka.

      operationId: notifyRegisteredDevice
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: User unique identifier
          required: true
          type: string
        - in: body
          name: body
          description: Device registration data
          required: true
          schema:
            $ref: '#/definitions/DeviceData'
      responses:
        200:
          description: Successful notification
        400:
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        403:
          description: The request is understood, but it has been refused or access is not allowed.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: The URI requested is invalid or the resource requested does not exist.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /users/{userId}/wallet:
    get:
      deprecated: true
      tags:
        - Wallet
      summary: Retrieve a wallet (Deprecated, see v2)
      description: |
        <i>DESCRIPTION</i>
        The service provides a list of Tickets purchased from a particular customer (wallet).

        <i>FLOW</i>
        *  The Channel calls the Service to have the customer's Wallet of Interest (Customerid), setting the mandatory data
        *  The service invokes the appropriate service of the IHB (CUA) <b>GET /tickets</b> to obtain the list of tickets related to the requested customer
        *  The service returns to the channel the list of tickets contained in the wallet customer with all the data stored in the ticketData object

        <i>SPECIFICS AND CONTROLS</i>
        *  Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        *  Pagination parameters, <code>pageNumber</code> and <code>pageSize</code>, are <b>required</b>
        *  (<code>pageNumber</code> * <code>pageSize</code>) must be less than the maximum value. The maximum allowed value is <b>10000</b>
        *  If the <code>pageActionCount</code> parameter is set to "true", the service does not consider the other set parameters (except the useriId, which is in path) and returns an empty body and the number of elements found
        *  If the <code>pageActionCount</code> parameter is set to "false", or is not present, the service returns the list with the item data in the body that meet the search criteria.

      operationId: getWallet
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: "X-WTF-LANG"
          in: "header"
          description: "Language code."
          required: false
          type: "string"
          default: "en_GB"
          x-example: "en_GB"
        - name: pageNumber
          in: query
          description: 'Determines the result index to start searching from. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageSize
          in: query
          description: 'Determines the number of elements to return. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageActionCount
          in: query
          description: 'Enabling count mode the service will return, in header X-WTF-PAGING-TOTAL-ELEMENTS, only the number of occurrences with no filters applied, any query parameters will be ignored; the body of the response will be null'
          required: false
          type: boolean
        - name: userId
          in: path
          description: User unique identifier
          required: true
          type: string
        - name: statuses
          in: query
          description: >
            Statuses of the retrieved tickets. If they are not present, the default values are PRC,VLD.            
            Possible values:
              * PRC - Purchased
              * RFD - Refund
              * EXP - Expired
              * CND - Cancelled
              * VLD - Validated
          required: false
          default: 'PRC,VLD'
          type: string
          collectionFormat: csv
        - name: transactionId
          in: query
          type: string
          required: false
          description: transaction identifier.
        - name: mediaId
          in: query
          type: string
          required: false
          description: media identifier.
        - name: showTransactions
          in: query
          description: 'Boolean flag used to show or hide transactions details'
          type: boolean
          required: false
          default: false
        - name: ticketId
          in: query
          description: 'Ticket identifier'
          type: string
          required: false
      responses:
        200:
          headers:
            X-WTF-PAGING-TOTAL-PAGES:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE-SIZE:
              type: integer
              format: int32
            X-WTF-PAGING-TOTAL-ELEMENTS:
              type: integer
              format: int32
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/TicketData'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: The URI requested is invalid or the wallet does not exist.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /v2/users/{userId}/wallet:
    get:
      tags:
        - Wallet
      summary: Retrieve a wallet .
      description: |
        <i>DESCRIPTION</i>
        The service provides a list of Tickets purchased from a particular customer with residual usage information(wallet).

        <i>FLOW</i>
        *  The Channel calls the Service to have the customer's Wallet of Interest (Customerid), setting the mandatory data
        *  The service invokes the appropriate service of the IHB (CUA) <b>GET /tickets</b> to obtain the list of tickets related to the requested customer
        *  The service returns to the channel the list of tickets contained in the wallet customer with all the data stored in the ticketData object

        <i>SPECIFICS AND CONTROLS</i>
        *  Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        *  Pagination parameters, <code>pageNumber</code> and <code>pageSize</code>, are <b>required</b>
        *  (<code>pageNumber</code> * <code>pageSize</code>) must be less than the maximum value. The maximum allowed value is <b>10000</b>
        *  If the <code>pageActionCount</code> parameter is set to "true", the service does not consider the other set parameters (except the useriId, which is in path) and returns an empty body and the number of elements found
        *  If the <code>pageActionCount</code> parameter is set to "false", or is not present, the service returns the list with the item data in the body that meet the search criteria.

      operationId: getWalletV2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: "X-WTF-LANG"
          in: "header"
          description: "Language code."
          required: false
          type: "string"
          default: "en_GB"
          x-example: "en_GB"
        - name: pageNumber
          in: query
          description: 'Determines the result index to start searching from. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageSize
          in: query
          description: 'Determines the number of elements to return. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageActionCount
          in: query
          description: 'Enabling count mode the service will return, in header X-WTF-PAGING-TOTAL-ELEMENTS, only the number of occurrences with no filters applied, any query parameters will be ignored; the body of the response will be null'
          required: false
          type: boolean
        - name: userId
          in: path
          description: User unique identifier
          required: true
          type: string
        - name: transactionId
          in: query
          type: string
          required: false
          description: transaction identifier.
        - name: mediaId
          in: query
          type: string
          required: false
          description: media identifier.
        - name: showTransactions
          in: query
          description: 'Boolean flag used to show or hide transactions details'
          type: boolean
          required: false
          default: false
        - name: ticketId
          in: query
          description: 'Ticket identifier'
          type: string
          required: false
        - name: fareProductIds
          in: query
          description: >
            FareProduct Ids associated with the tickets to find
          required: false
          type: array
          items:
            type: string
      responses:
        200:
          headers:
            X-WTF-PAGING-TOTAL-PAGES:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE-SIZE:
              type: integer
              format: int32
            X-WTF-PAGING-TOTAL-ELEMENTS:
              type: integer
              format: int32
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/TicketData'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: The URI requested is invalid or the wallet does not exist.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /v2/users/{userId}/wallet/history:
    get:
      tags:
        - Wallet
      summary: Retrieve a wallet history .
      description: |
        <i>DESCRIPTION</i>
        The service provides a list of Tickets purchased from a particular customer for a given date range without residual usage information (wallet).

        <i>FLOW</i>
        *  The Channel calls the Service to have the customer's Wallet of Interest (Customerid), setting the mandatory data
        *  The service invokes the appropriate service of the IHB (CUA) <b>GET /tickets</b> to obtain the list of tickets related to the requested customer
        *  The service returns to the channel the list of tickets contained in the wallet customer with all the data stored in the ticketData object

        <i>SPECIFICS AND CONTROLS</i>
        *  Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        *  Pagination parameters, <code>pageNumber</code> and <code>pageSize</code>, are <b>required</b>
        *  (<code>pageNumber</code> * <code>pageSize</code>) must be less than the maximum value. The maximum allowed value is <b>10000</b>
        *  If the <code>pageActionCount</code> parameter is set to "true", the service does not consider the other set parameters (except the useriId, which is in path) and returns an empty body and the number of elements found
        *  If the <code>pageActionCount</code> parameter is set to "false", or is not present, the service returns the list with the item data in the body that meet the search criteria.

      operationId: getWalletHistory
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: "X-WTF-LANG"
          in: "header"
          description: "Language code."
          required: false
          type: "string"
          default: "en_GB"
          x-example: "en_GB"
        - name: pageNumber
          in: query
          description: 'Determines the result index to start searching from. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageSize
          in: query
          description: 'Determines the number of elements to return. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageActionCount
          in: query
          description: 'Enabling count mode the service will return, in header X-WTF-PAGING-TOTAL-ELEMENTS, only the number of occurrences with no filters applied, any query parameters will be ignored; the body of the response will be null'
          required: false
          type: boolean
        - name: userId
          in: path
          description: User unique identifier
          required: true
          type: string
        - name: statuses
          in: query
          description: >
            Statuses of the retrieved tickets. If they are not present, the default values are PRC,VLD.            
            Possible values:
              * PRC - Purchased
              * RFD - Refund
              * EXP - Expired
              * CND - Cancelled
              * VLD - Validated
          required: false
          default: 'PRC,VLD'
          type: string
          collectionFormat: csv
        - name: transactionId
          in: query
          type: string
          required: false
          description: transaction identifier.
        - name: mediaId
          in: query
          type: string
          required: false
          description: media identifier.
        - name: showTransactions
          in: query
          description: 'Boolean flag used to show or hide transactions details'
          type: boolean
          required: false
          default: false
        - name: ticketId
          in: query
          description: 'Ticket identifier'
          type: string
          required: false
        - name: fareProductIds
          in: query
          description: >
            FareProduct Ids associated with the tickets to find
          required: false
          type: array
          items:
            type: string
        - name: "statusDateStart"
          in: query
          required: true
          description: 'Beginning of the interval in which the statusDate (Last date which the ticket status was updated) must be contained. Format "YYYY-MM-DD" (ISO 8601). Default: current date.'
          type: string
          format: date
        - name: "statusDateEnd"
          in: query
          required: true
          description: 'End of the interval in which the statusDate (Last date which the ticket status was updated) must be contained. Format "YYYY-MM-DD" (ISO 8601). Default: current date.'
          type: string
          format: date
      responses:
        200:
          headers:
            X-WTF-PAGING-TOTAL-PAGES:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE-SIZE:
              type: integer
              format: int32
            X-WTF-PAGING-TOTAL-ELEMENTS:
              type: integer
              format: int32
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/TicketData'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: The URI requested is invalid or the wallet does not exist.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /blacklist/users/{userId}/hceDevices/{deviceCodeExt}:
    post:
      tags:
        - Device
      summary: Put HCE device in blacklist
      description: |
        <i>DESCRIPTION</i>
        The TCI Service blacklists a specific HCE device relating to a Customer.

        <i>FLOW</i>
        *  HCE channel requires the service to blacklist an HCE device
        *  The service publishes on topic IHB "queuing. MMS. In. Media. V1" The request of type "lock" and notifies the channel HCE the taking charge of the request
        *  Asynchronously the MediaLifeCycle (MLC) reads the message from the topic, puts the device on the blacklist and publishes the event on the topic "queuing.mms.out.mediaeventlist.v1"

        <i>SPECIFICS AND CONTROLS</i>
        *  Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        *  If the inBlackListSince object is not valued, the current date is set
        *  If the deviceCodeExt object is valued in the body, it must be equal to the equivalent  variable in path
        *  The media corresponding to the input deviceCodeExt must be associated to the userId of the path.

      operationId: notifyHCEDeviceInBlackList
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: User unique identifier
          required: true
          type: string
        - name: deviceCodeExt
          in: path
          description: For HCE devices is composed by IMEI-AppId-UserId.
          required: true
          type: string
        - in: body
          name: body
          description: Device data
          required: false
          schema:
            $ref: '#/definitions/HCEDeviceBlackList'
      responses:
        200:
          description: Successful notification
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        403:
          description: The request is understood, but it has been refused or access is not allowed.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: The URI requested is invalid or the resource requested does not exist.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /cdm/{cdmId}:
    get:
      tags:
        - Ticket & List
      summary: Retrieve the card data model
      description: 'Not implemented'
      operationId: getCardDataModel
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: cdmId
          in: path
          description: Card data model unique identifier
          required: true
          type: string
      responses:
        '200':
          description: Card data model found
          schema:
            $ref: '#/definitions/CardDataModel'
        '404':
          description: Card data model not found

  '/aztec':
    post:
      tags:
        - Aztec
      summary: 'Create aztec code'
      description: 'Create aztec code'
      operationId: generateAztecCode
      produces:
        - application/octet-stream
      parameters:
        - in: body
          name: body
          description: Product registration data
          required: true
          schema:
            $ref: '#/definitions/Aztec'
      responses:
        '200':
          description: Aztec created.
          schema:
            type: string
            format: byte
        '400':
          description: Aztec creation failed.
          schema:
            $ref: '#/definitions/Error'

  /saleEngine:
    post:
      tags:
        - SaleEngine
      summary: 'Create a best fare instance from a trip input and return a top fare product.'
      description: '<i>DESCRIPTION</i>  The operation search a trip for the given parameters.'
      operationId: saleEngine
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: ''
          required: true
          schema:
            $ref: '#/definitions/SearchTripInput'
      responses:
        '200':
          description: Best price for the trip found.
          schema:
            $ref: '#/definitions/FareTrip'
        '400':
          description: Best price for the trip NOT found.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: "Internal server error."
          schema:
            type: array
            items:
              $ref: "#/definitions/Error"
        '503':
          description: "The server is up, but overloaded with requests."
          schema:
            type: array
            items:
              $ref: "#/definitions/Error"

  /liteSaleEngine:
    post:
      tags:
        - SaleEngine
      summary: 'Create a trip products instance from a trip input and return a top trip product.'
      description: '<i>DESCRIPTION</i> The operation search a list of products and sales packages for the given parameters.'
      operationId: liteSaleEngine
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: ''
          required: true
          schema:
            $ref: '#/definitions/SearchTripInput'
      responses:
        '200':
          description: List of products and sales packages according to a leg data.
          schema:
            $ref: '#/definitions/TripProducts'
        '400':
          description: List of products and sales packages NOT found.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: "Internal server error."
          schema:
            type: array
            items:
              $ref: "#/definitions/Error"
        '503':
          description: "The server is up, but overloaded with requests."
          schema:
            type: array
            items:
              $ref: "#/definitions/Error"

  /products:
    post:
      tags:
        - Fare Product & Sales Package
      summary: Add new Product
      description: |
        <i>DESCRIPTION</i>
        The TCI service requires the inclusion of a product in the catalog.

        <i>FLOW</i>
        *  The service verifies that the product being censored does not exist on the OFC system catalog (IHB Offering Catalog) and send Asynchronously this to the Fare Product catalog.

        <i>SPECIFICS AND CONTROLS</i>
        *  The API saves exactly the received object, it is necessary that the user of the API checks the integrity of the product surveyed.
        *  Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        *  Checks the equality of the productId in the call to the service and input body
        *  If the productVersion is not entered, the number 1 is automatically set as the version

      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Product registration data
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        201:
          description: Successful notification
          schema:
            $ref: '#/definitions/Product'
        400:
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        403:
          description: The request is understood, but it has been refused or access is not allowed.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: The URI requested is invalid or the resource requested does not exist.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

    get:
      tags:
        - Fare Product & Sales Package
      summary: Search products
      description: |
        <i>DESCRIPTION</i>
        The TCI service seeks and returns one or more tariff products present in the catalogue.

        <i>FLOW</i>
        *  The channel invokes the service by providing one, none  or more search parameters
        *  The service calls the appropriate IHB (OC) <b>GET /products</b> service to get the list of the tariff products of interest
        *  The service returns to the channel the search result

        <i>SPECIFICS AND CONTROLS</i>
        *  If the channel provides a date as a search parameter, the service verifies the correctness of the format, if it does not provide any date, the system sets the system date as default
        *  The service searches for all products valid on the given date or system or that have <b>(startDate minus advanceSale) &le; Input/system date &le; expDate </b>
        *  Pagination parameters, <code>pageNumber</code> and <code>pageSize</code>, are <b>required</b>
        *  (<code>pageNumber</code> * <code>pageSize</code>) must be less than the maximum value. The maximum allowed value is <b>10000</b>
        *  If the <code>pageActionCount</code> parameter is set to "true", the service does not take into account the other parameters that are set, returns an empty body  and the number of elements found
        *  If the <code>pageActionCount</code> parameter is set to "false", or is not present, the service returns in the body the list with data about the items that meet the search criteria

      operationId: searchProducts
      produces:
        - "application/json"
      parameters:
        - name: "X-WTF-LANG"
          in: "header"
          description: "Language code."
          required: false
          type: "string"
          default: "en_GB"
          x-example: "en_GB"
        - name: pageNumber
          in: query
          description: 'Determines the result index to start searching from. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageSize
          in: query
          description: 'Determines the number of elements to return. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageActionCount
          in: query
          description: 'Enabling count mode the service will return, in header X-WTF-PAGING-TOTAL-ELEMENTS, only the number of occurrences with no filters applied, any query parameters will be ignored; the body of the response will be null'
          required: false
          type: boolean
        - name: prdId
          in: query
          description: "Product unique identifier"
          required: false
          type: string
        - name: prdVs
          in: query
          description: "Version of the product"
          required: false
          type: "integer"
          format: "int32"
        - name: "prdNm"
          in: query
          description: "Product name"
          required: false
          type: string
        - name: "prdTp"
          in: query
          description: "Product type: it is possible to specify one or more type separated by comma"
          required: false
          type: string
          items:
            type: string
          collectionFormat: csv
        - name: "prdDs"
          in: query
          description: "Product description"
          required: false
          type: string
        - name: "dtVal"
          in: query
          required: false
          description: 'Date on which the products are valid. Format "YYYY-MM-DD" (ISO 8601). Default: current date.'
          type: string
          format: date
        - name: "codEx"
          in: query
          description: "Product External code"
          required: false
          type: string
        - name: "orgNm"
          in: query
          description: "Organisation name"
          required: false
          type: string
        - name: "orgId"
          in: query
          description: "Organisation identifier: it is possible to specify one or more codes separated by comma"
          required: false
          type: string
          items:
            type: string
          collectionFormat: csv
        - name: "orgTC"
          in: query
          description: "Organisation type code: it is possible to specify one or more codes separated by comma"
          required: false
          type: string
          items:
            type: string
            enum: [ AT, OP, CO, DO, OW ]
          collectionFormat: csv
        - name: "serId"
          in: query
          description: "Service identifier"
          required: false
          type: string
        - name: "serNm"
          in: query
          description: "Service name"
          required: false
          type: string
        - name: "serCE"
          in: query
          description: "Service external code: it is possible to specify one or more codes separated by comma"
          required: false
          type: string
          items:
            type: string
          collectionFormat: csv
        - name: "serMd"
          in: query
          description: "Service mode code related to product"
          required: false
          type: string
        - name: "serSM"
          in: query
          description: "Service sub mode code related to product"
          required: false
          type: string
        - name: "serLn"
          in: query
          description: "Service line identifier related to product"
          required: false
          type: string
        - name: "zonId"
          in: query
          description: "Fare zone identifier"
          required: false
          type: string
        - name: "zonNm"
          in: query
          description: "Fare zone name"
          required: false
          type: string
        - name: "zonCE"
          in: query
          description: "Fare zone external code: it is possible to specify one or more codes separated by comma"
          required: false
          type: string
          items:
            type: string
          collectionFormat: csv
        - name: "tvpNm"
          in: query
          description: "Temporal validity name"
          required: false
          type: string
        - name: "dTyId"
          in: query
          description: "Day type identifier"
          required: false
          type: string
        - name: "dtBnd"
          in: query
          required: false
          description: 'Date included in the product date bands. Format "YYYY-MM-DD" (ISO 8601)'
          type: string
          format: date
        - name: "tmBnd"
          in: query
          required: false
          description: 'Time included in the product time bands. Format "hh:mm:ss" (ISO 8601)'
          type: string
          format: date
        - name: "boBnd"
          in: query
          required: false
          description: 'Black out use type in the product time bands. (ex. NTP, TP)'
          type: string
        - name: "vldId"
          in: query
          description: "Validity period identifier"
          required: false
          type: string
          maxLength: 10
        - name: "vldPT"
          in: query
          description: "Validity period type: it is possible to specify one or more codes separated by comma"
          required: false
          type: string
          enum: [ C, D, H, M, T, W, Y ]
        - name: "vldSD"
          in: query
          description: "Validity period standard duration"
          required: false
          type: string
        - name: "cpNam"
          in: query
          description: "Customer profile name"
          required: false
          type: string
        - name: "cpMnA"
          in: query
          description: "Customer profile minimum age: it is possible to specify one or two values separated by comma; if the value is a decimal, dot decimal separator must be used. If one value is specified, the filter returns all matches less than or equal to the input value. If two values are specified, the filter returns all matches greater than or equal to the first input value and less than or equal to the second input value. N.B. In this case if the two values are the same, the filter returns exactly the match with this value."
          required: false
          type: string
        - name: "cpMxA"
          in: query
          description: "Customer profile maximum age: it is possible to specify one or two values separated by comma; if the value is a decimal, dot decimal separator must be used. If one value is specified, the filter returns all matches greater than or equal to the input value. If two values are specified, the filter returns all matches greater than or equal to the first input value and less than or equal to the second input value. N.B. In this case if the two values are the same, the filter returns exactly the match with this value."
          required: false
          type: string
        - name: "cpMnH"
          in: query
          description: "Customer profile minimum height: it is possible to specify one or two values separated by comma; if the value is a decimal, dot decimal separator must be used. If one value is specified, the filter returns all matches less than or equal to the input value. If two values are specified, the filter returns all matches greater than or equal to the first input value and less than or equal to the second input value. N.B. In this case if the two values are the same, the filter returns exactly the match with this value."
          required: false
          type: string
        - name: "cpMxH"
          in: query
          description: "Customer profile maximum height: it is possible to specify one or two values separated by comma; if the value is a decimal, dot decimal separator must be used. If one value is specified, the filter returns all matches greater than or equal to the input value. If two values are specified, the filter returns all matches greater than or equal to the first input value and less than or equal to the second input value. N.B. In this case if the two values are the same, the filter returns exactly the match with this value."
          required: false
          type: string
        - name: "cpMnI"
          in: query
          description: "Customer profile minimum income: it is possible to specify one or two values separated by comma; if the value is a decimal, dot decimal separator must be used. If one value is specified, the filter returns all matches less than or equal to the input value. If two values are specified, the filter returns all matches greater than or equal to the first input value and less than or equal to the second input value. N.B. In this case if the two values are the same, the filter returns exactly the match with this value."
          required: false
          type: string
        - name: "cpMxI"
          in: query
          description: "Customer profile maximum income: it is possible to specify one or two values separated by comma; if the value is a decimal, dot decimal separator must be used. If one value is specified, the filter returns all matches greater than or equal to the input value. If two values are specified, the filter returns all matches greater than or equal to the first input value and less than or equal to the second input value. N.B. In this case if the two values are the same, the filter returns exactly the match with this value."
          required: false
          type: string
        - name: "cpRes"
          in: query
          description: "Customer profile local resident limitation: binary value"
          required: false
          type: integer
          enum: [ 0, 1 ]
        - name: "lugBT"
          in: query
          description: "Baggage type: it is possible to specify one or more types separated by comma"
          required: false
          type: string
          items:
            type: string
            enum: [ LGGFB, LGGLB, LGGMB, LGGN, LGGSB, LGGSP ]
          collectionFormat: csv
        - name: "geoSt"
          in: query
          description: "Geographical interval start: it is possible to specify one or two values separated by comma; if the value is a decimal, dot decimal separator must be used. If one value is specified, the filter returns all matches less than or equal to the input value. If two values are specified, the filter returns all matches greater than or equal to the first input value and less than or equal to the second input value. N.B. In this case if the two values are the same, the filter returns exactly the match with this value."
          required: false
          type: string
        - name: "geoEn"
          in: query
          description: "Geographical interval end: it is possible to specify one or two values separated by comma; if the value is a decimal, dot decimal separator must be used. If one value is specified, the filter returns all matches greater than or equal to the input value. If two values are specified, the filter returns all matches greater than or equal to the first input value and less than or equal to the second input value. N.B. In this case if the two values are the same, the filter returns exactly the match with this value."
          required: false
          type: string
        - name: "tpCEx"
          in: query
          description: "Touchpoint external code: it is possible to specify one or more codes separated by comma"
          required: false
          type: string
          items:
            type: string
          collectionFormat: csv
        - name: "tpTyp"
          in: query
          description: "Touchpoint type: it is possible to specify one or more types separated by comma"
          required: false
          type: string
          items:
            type: string
            enum: [ OBS, MApp, atStop, onBoard, online, telephone, electronicPass, HCE, agency, tourOperator, TVM, other, GRPTouchPoint, TO, VA ]
          collectionFormat: csv
        - name: "medTp"
          in: query
          description: "Media type: it is possible to specify one or more types separated by comma"
          required: false
          type: string
          items:
            type: string
            enum: [ EMV, SC, PPR, PPRS, MOB, VT, HCE, CP, CIE, CNS ]
        - name: "cpId"
          in: query
          description: "Customer Profile Id. It is possible to specify one or more types separated by comma"
          required: false
          type: string
        - name: "cpIdOp"
          in: query
          description: "Customer Profile Id Operator. 'AND' is the default value"
          required: false
          type: string
          items:
            type: string
            enum: [ AND, OR ]
      responses:
        200:
          headers:
            X-WTF-PAGING-TOTAL-PAGES:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE-SIZE:
              type: integer
              format: int32
            X-WTF-PAGING-TOTAL-ELEMENTS:
              type: integer
              format: int32
          description: "Products found."
          schema:
            type: array
            items:
              $ref: "#/definitions/Product"
        400:
          description: "The request was invalid or cannot be otherwise served."
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: "The URI requested is invalid or the resource requested does not exists."
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: "Something is broken."
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /products/{productId}/{version}:
    put:
      tags:
        - Fare Product & Sales Package
      summary: Update the specified Product
      description: |
        <i>DESCRIPTION</i>
        The TCI service requires updating a product in the catalog.

        <i>FLOW</i>
        *  The service verifies that the product being modified exists in the OFC system catalog (IHB Offering Catalog) and update this.

        <i>SPECIFICS AND CONTROLS</i>
        *  The API saves exactly the received object, it is necessary that the user of the API checks the integrity of the product surveyed.
        *  Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        *  Checks the equality of the productId in the call to the service and input body

      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: productId
          type: string
          format: uuid
          required: true
          description: "Unique identification of product."
          x-example: "ac85a602-0a88-11e8-b9df-c9e0778a2c0a"
        - in: path
          name: version
          type: integer
          format: int32
          required: true
          description: "Version of product."
          x-example: 1
        - in: body
          name: body
          description: Product registration data
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        200:
          description: Successful notification
          schema:
            $ref: '#/definitions/Product'
        400:
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        403:
          description: The request is understood, but it has been refused or access is not allowed.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: The URI requested is invalid or the resource requested does not exist.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /products/{productId}/{version}/validity:
    get:
      tags:
        - Fare Product & Sales Package
      summary: "Temporal validity calculation"
      description: |
        <i>DESCRIPTION</i>
        The TCI service identifies and returns, for a tariff product (a fixed trigger or a sales trigger) the possible periods of use ,(Usage Validity Period) against which to buy the ticket of interest (for example, a monthly subscription product provides 3 periods: March 2019; April 2019; June 2019)

        <i>FLOW</i>
        *  The Channel recalls the Service by providing the productID in input
        *  The Service calls the appropriate IHB Search / product service to get information about the Product and search for possible different periods of use
        *  The Service provides the Channel with possible different periods of use

        <i>SPECIFICS AND CONTROLS</i>
        *  If the <code>validityPeriod.trigger.usageTriggerType</code> of the respective product is valorized as "Fixed"(code I) or an equivalent value ("Day of month", "Day of week", "Month") and the <code>validityPeriod.validityPeriodType</code> is one of [Days, Months, Weeks, Years], the input time is ignored and it is setted to midnight for computing the date-time ranges.
        *  If the <code>validityPeriod.validityPeriodType</code> of the respective product is valorized as "Hours" (code H) or "Minutes" (code T), the input value <code>maxOption</code> is ignored: only one range will be returned.
        *  If the <code>validityPeriod.trigger.usageTriggerType</code> of the respective product is valorized as "Sale"(code P), the input value <code>maxOption</code> is ignored: only one range will be returned.

      operationId: getProductTemporalValidity
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: productId
          type: string
          format: uuid
          required: true
          description: "Unique identification of product."
          x-example: "ac85a602-0a88-11e8-b9df-c9e0778a2c0a"
        - in: path
          name: version
          type: integer
          format: int32
          required: true
          description: "Version of product."
          x-example: 1
        - in: query
          name: maxOption
          type: integer
          format: int32
          required: false
          description: "Maximum number of combination to calculate."
          default: 1
          x-example: 1
        - in: query
          name: date
          type: string
          format: date
          required: false
          description: "Minimum date for starting the intervals. Formats(ISO 8601): 'yyyy-MM-dd', 'yyyy-MM-ddTHH:mm:ss'. If the input format is 'yyyy-MM-dd', the time is setted to midnight."
          default: current date-time
          x-example: "2018-03-20T09:45:00"
      responses:
        200:
          description: Temporal validity calculated
          schema:
            type: array
            items:
              $ref: '#/definitions/DateRange'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: The URI requested is invalid or the resource requested does not exist.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Something is broken.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /salespackages:
    get:
      tags:
        - Fare Product & Sales Package
      summary: Search Sales packages
      description: Search Sales Packages inside catalog.

        <i>SPECIFICS AND CONTROLS</i>

        * Pagination parameters, <code>pageNumber</code> and <code>pageSize</code>, are <b>required</b>

        * (<code>pageNumber</code> * <code>pageSize</code>) must be less than the maximum value. The maximum allowed value is <b>10000</b>
      operationId: searchSalesPackages
      produces:
        - "application/json"
      parameters:
        - name: "X-WTF-LANG"
          in: "header"
          description: "Language code."
          required: false
          type: "string"
          default: "en_GB"
          x-example: "en_GB"
        - name: pageNumber
          in: query
          description: 'Determines the result index to start searching from. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageSize
          in: query
          description: 'Determines the number of elements to return. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageActionCount
          in: query
          description: 'Enabling count mode the service will return, in header X-WTF-PAGING-TOTAL-ELEMENTS, only the number of occurrences with no filters applied, any query parameters will be ignored; the body of the response will be null'
          required: false
          type: boolean
        #
        # Query filters related only to the sales package
        #
        - name: spkId
          in: query
          description: "Sales Package unique identifier"
          required: false
          type: string
        - name: spkVs
          in: query
          description: "Version of the sales package"
          required: false
          type: "integer"
          format: "int32"
        - name: "spkNm"
          in: query
          description: "Sales Package name"
          required: false
          type: string
        - name: "spkTp"
          in: query
          description: "Sales Package type: it is possible to specify one or more type separated by comma"
          required: false
          type: string
          items:
            type: string
          collectionFormat: csv
        - name: "spkDs"
          in: query
          description: "Sales Package description"
          required: false
          type: string
        - name: "spkDV"
          in: query
          required: false
          description: 'Date on which the sales packages are valid. Format "YYYY-MM-DD" (ISO 8601). Default: current date.'
          type: string
          format: date
        - name: "spkCE"
          in: query
          description: "Sales Package External code"
          required: false
          type: string
        - name: "tpCEx"
          in: query
          description: "Touchpoint external code related to the sales package: it is possible to specify one or more codes separated by comma"
          required: false
          type: string
          items:
            type: string
          collectionFormat: csv
        - name: "tpTyp"
          in: query
          description: "Touchpoint type related to the sales package: it is possible to specify one or more types separated by comma"
          required: false
          type: string
          items:
            type: string
            enum: [ MApp,atStop, onBoard, online, telephone, electronicPass, HCE, agency, tourOperator, TVM, other, GRPTouchPoint, TO, VA ]
          collectionFormat: csv
        - name: prCTp
          in: query
          description: "Customer type related to a promotion of the sales package"
          required: false
          type: string
        - name: gnpId
          in: query
          description: "Generic product unique identifier related to sales package"
          required: false
          type: string
        - name: gnpNm
          in: query
          description: "Generic product name related to sales package"
          required: false
          type: string
        - name: gnpTp
          in: query
          description: "Generic product type related to sales package"
          required: false
          type: string
        - name: cstNb
          in: query
          description: "Customer number related to sales package"
          required: false
          type: string
        #
        # Query filters related to the sales package or linked products
        #
        - name: "orgNm"
          in: query
          description: "Organisation name of the sales package or product"
          required: false
          type: string
        - name: "orgId"
          in: query
          description: "Organisation identifier of the sales package or product: it is possible to specify one or more codes separated by comma"
          required: false
          type: string
          items:
            type: string
          collectionFormat: csv
        - name: "orgTC"
          in: query
          description: "Organisation type code of the sales package or product: it is possible to specify one or more codes separated by comma"
          required: false
          type: string
          items:
            type: string
            enum: [ AT, OP, CO, DO, OW ]
          collectionFormat: csv
        - name: "cpNam"
          in: query
          description: "Customer profile name related to sales package or product"
          required: false
          type: string
        - name: "cpMnA"
          in: query
          description: "Customer profile minimum age related to sales package or product: it is possible to specify one or two values separated by comma; if the value is a decimal, dot decimal separator must be used. If one value is specified, the filter returns all matches less than or equal to the input value. If two values are specified, the filter returns all matches greater than or equal to the first input value and less than or equal to the second input value. N.B. In this case if the two values are the same, the filter returns exactly the match with this value."
          required: false
          type: string
        - name: "cpMxA"
          in: query
          description: "Customer profile maximum age related to sales package or product: it is possible to specify one or two values separated by comma; if the value is a decimal, dot decimal separator must be used. If one value is specified, the filter returns all matches greater than or equal to the input value. If two values are specified, the filter returns all matches greater than or equal to the first input value and less than or equal to the second input value. N.B. In this case if the two values are the same, the filter returns exactly the match with this value."
          required: false
          type: string
        - name: "cpMnH"
          in: query
          description: "Customer profile minimum height related to sales package or product: it is possible to specify one or two values separated by comma; if the value is a decimal, dot decimal separator must be used. If one value is specified, the filter returns all matches less than or equal to the input value. If two values are specified, the filter returns all matches greater than or equal to the first input value and less than or equal to the second input value. N.B. In this case if the two values are the same, the filter returns exactly the match with this value."
          required: false
          type: string
        - name: "cpMxH"
          in: query
          description: "Customer profile maximum height related to sales package or product: it is possible to specify one or two values separated by comma; if the value is a decimal, dot decimal separator must be used. If one value is specified, the filter returns all matches greater than or equal to the input value. If two values are specified, the filter returns all matches greater than or equal to the first input value and less than or equal to the second input value. N.B. In this case if the two values are the same, the filter returns exactly the match with this value."
          required: false
          type: string
        - name: "cpMnI"
          in: query
          description: "Customer profile minimum income related to sales package or product: it is possible to specify one or two values separated by comma; if the value is a decimal, dot decimal separator must be used. If one value is specified, the filter returns all matches less than or equal to the input value. If two values are specified, the filter returns all matches greater than or equal to the first input value and less than or equal to the second input value. N.B. In this case if the two values are the same, the filter returns exactly the match with this value."
          required: false
          type: string
        - name: "cpMxI"
          in: query
          description: "Customer profile maximum income related to sales package or product: it is possible to specify one or two values separated by comma; if the value is a decimal, dot decimal separator must be used. If one value is specified, the filter returns all matches greater than or equal to the input value. If two values are specified, the filter returns all matches greater than or equal to the first input value and less than or equal to the second input value. N.B. In this case if the two values are the same, the filter returns exactly the match with this value."
          required: false
          type: string
        - name: "cpRes"
          in: query
          description: "Customer profile local resident limitation: binary value related to sales package or product"
          required: false
          type: integer
          enum: [ 0, 1 ]
        - name: "medTp"
          in: query
          description: "Media type: it is possible to specify one or more types separated by comma related to sales package or product"
          required: false
          type: string
          items:
            type: string
            enum: [ EMV, SC, PPR, MOB, VT, HCE, CP, CIE, CNS ]
        - name: "vldId"
          in: query
          description: "Validity period identifier related to sales package or product"
          required: false
          type: string
          maxLength: 10
        - name: "vldPT"
          in: query
          description: "Validity period type related to sales package or product: it is possible to specify one or more codes separated by comma"
          required: false
          type: string
          enum: [ C, D, H, M, T, W, Y ]
        - name: "vldSD"
          in: query
          description: "Validity period standard duration related to sales package or product"
          required: false
          type: string
        #
        # Query filters related only to the linked products of the sales package
        #
        - name: prdId
          in: query
          description: "Product unique identifier"
          required: false
          type: string
        - name: prdVs
          in: query
          description: "Version of the product"
          required: false
          type: "integer"
          format: "int32"
        - name: "prdNm"
          in: query
          description: "Product name"
          required: false
          type: string
        - name: "prdTp"
          in: query
          description: "Product type: it is possible to specify one or more type separated by comma"
          required: false
          type: string
          items:
            type: string
          collectionFormat: csv
        - name: "prdDs"
          in: query
          description: "Product description"
          required: false
          type: string
        - name: "prdDV"
          in: query
          required: false
          description: 'Date on which the products are valid. Format "YYYY-MM-DD" (ISO 8601)'
          type: string
          format: date
        - name: "prdCE"
          in: query
          description: "Product External code"
          required: false
          type: string
        - name: "ntSld"
          in: query
          description: "It is true if the linked product is not sold separately"
          required: false
          type: boolean
        - name: "lugBT"
          in: query
          description: "Baggage type related to product: it is possible to specify one or more types separated by comma"
          required: false
          type: string
          items:
            type: string
            enum: [ LGGFB, LGGLB, LGGMB, LGGN, LGGSB, LGGSP ]
          collectionFormat: csv
        - name: "geoSt"
          in: query
          description: "Geographical interval start related to product: it is possible to specify one or two values separated by comma; if the value is a decimal, dot decimal separator must be used. If one value is specified, the filter returns all matches less than or equal to the input value. If two values are specified, the filter returns all matches greater than or equal to the first input value and less than or equal to the second input value. N.B. In this case if the two values are the same, the filter returns exactly the match with this value."
          required: false
          type: string
        - name: "geoEn"
          in: query
          description: "Geographical interval end related to product: it is possible to specify one or two values separated by comma; if the value is a decimal, dot decimal separator must be used. If one value is specified, the filter returns all matches greater than or equal to the input value. If two values are specified, the filter returns all matches greater than or equal to the first input value and less than or equal to the second input value. N.B. In this case if the two values are the same, the filter returns exactly the match with this value."
          required: false
          type: string
        - name: "serId"
          in: query
          description: "Service identifier related to product"
          required: false
          type: string
        - name: "serNm"
          in: query
          description: "Service name related to product"
          required: false
          type: string
        - name: "serCE"
          in: query
          description: "Service external code related to product: it is possible to specify one or more codes separated by comma"
          required: false
          type: string
          items:
            type: string
          collectionFormat: csv
        - name: "serMd"
          in: query
          description: "Service mode code related to product"
          required: false
          type: string
        - name: "serSM"
          in: query
          description: "Service sub mode code related to product"
          required: false
          type: string
        - name: "serLn"
          in: query
          description: "Service line identifier related to product"
          required: false
          type: string
        - name: "zonId"
          in: query
          description: "Fare zone identifier related to product"
          required: false
          type: string
        - name: "zonNm"
          in: query
          description: "Fare zone name related to product"
          required: false
          type: string
        - name: "zonCE"
          in: query
          description: "Fare zone external code related to product: it is possible to specify one or more codes separated by comma"
          required: false
          type: string
          items:
            type: string
          collectionFormat: csv
        - name: "tvpNm"
          in: query
          description: "Temporal validity name related to product"
          required: false
          type: string
        - name: "dTyId"
          in: query
          description: "Day type identifier related to product"
          required: false
          type: string
        - name: "dtBnd"
          in: query
          required: false
          description: 'Date included in the product date bands. Format "YYYY-MM-DD" (ISO 8601)'
          type: string
          format: date
        - name: "tmBnd"
          in: query
          required: false
          description: 'Time included in the product time bands. Format "hh:mm:ss" (ISO 8601)'
          type: string
          format: date
        - name: "boBnd"
          in: query
          required: false
          description: 'Black out use type in the product time bands. (ex. NTP, TP)'
          type: string
        - name: "cpId"
          in: query
          description: "Customer Profile Id. It is possible to specify one or more types separated by comma"
          required: false
          type: string
        - name: "cpIdOp"
          in: query
          description: "Customer Profile Id Operator. 'AND' is the default value"
          required: false
          type: string
          items:
            type: string
            enum: [ AND, OR ]
      responses:
        200:
          headers:
            X-WTF-PAGING-TOTAL-PAGES:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE-SIZE:
              type: integer
              format: int32
            X-WTF-PAGING-TOTAL-ELEMENTS:
              type: integer
              format: int32
          description: "Sales Packages found."
          schema:
            type: array
            items:
              $ref: "#/definitions/SalesPackage"
        400:
          description: "The request was invalid or cannot be otherwise served."
          schema:
            type: array
            items:
              $ref: "#/definitions/Error"
        404:
          description: "The URI requested is invalid or the resource requested does not exists."
          schema:
            type: array
            items:
              $ref: "#/definitions/Error"
        500:
          description: "Something is broken."
          schema:
            type: array
            items:
              $ref: "#/definitions/Error"
  /salespackages/{salespackageId}/{version}/validity:
    get:
      tags:
        - Fare Product & Sales Package
      summary: "Temporal validity calculation"
      description: |
        Returns a set of possible date-time ranges for the given sales package.
        If the <code>validityPeriod.trigger.usageTriggerType</code> of the respective sales package is valorized as "Fixed"(code I) or an equivalent value ("Day of month", "Day of week", "Month") and the <code>validityPeriod.validityPeriodType</code> is one of [Days, Months, Weeks, Years], the input time is ignored and it is setted to midnight for computing the date-time ranges.
        If the <code>validityPeriod.validityPeriodType</code> of the respective sales package is valorized as "Hours" (code H) or "Minutes" (code T), the input value <code>maxOption</code> is ignored: only one range will be returned.
        If the <code>validityPeriod.trigger.usageTriggerType</code> of the respective sales package is valorized as "Sale"(code P), the input value <code>maxOption</code> is ignored: only one range will be returned.
      operationId: getSalesPackageTemporalValidity
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: salespackageId
          type: string
          format: uuid
          required: true
          description: "Unique identification of sales package."
          x-example: "ac85a602-0a88-11e8-b9df-c9e0778a2c0a"
        - in: path
          name: version
          type: integer
          format: int32
          required: true
          description: "Version of sales package."
          x-example: 1
        - in: query
          name: maxOption
          type: integer
          format: int32
          required: false
          description: "Maximum number of combination to calculate."
          default: 1
          x-example: 1
        - in: query
          name: date
          type: string
          format: date
          required: false
          description: "Minimum date for starting the intervals. Formats(ISO 8601): 'yyyy-MM-dd', 'yyyy-MM-ddTHH:mm:ss'. If the input format is 'yyyy-MM-dd', the time is setted to midnight."
          default: current date-time
          x-example: "2018-03-20T09:45:00"
      responses:
        200:
          description: Temporal validity calculated
          schema:
            type: array
            items:
              $ref: '#/definitions/DateRange'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: The URI requested is invalid or the resource requested does not exist.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Something is broken.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /fareProductPrice:
    post:
      tags:
        - Fare Product & Sales Package
      summary: 'Get price of Fare Product and Sales Package'
      description: |
        <i>DESCRIPTION</i>
        The service returns the total price of the shopping cart. 
        The shopping cart can be made up of a list of Fare Products and Sales Packages.       
        <i>FLOW</i> 
        * The channel invokes the service
        * The service returns the total price of the shopping cart
      operationId: getFareProductPrice
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/BasketCart'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/BasketPrice'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        503:
          description: The server is up, but overloaded with requests. Try again later.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /purchases/verify:
    post:
      tags:
        - Purchase Transaction
      summary: Purchase verification.
      description: |
        <i>DESCRIPTION</i>

        The TCI service verifies the correctness and completeness of the purchase data provided by the channel before authorizing the actual purchase of the tariff product or sales package and the registration of the related transaction.

        <i>FLOW</i>
        * For each ticket purchase event, the channel invokes the service by providing information about the purchase transaction (PurchaseData)
        * The service invokes the appropriate IHB <b>Search /products</b> or IHB <b>Search /salespackages</b> service to retrieve information about the tariff product or salespackage intend to purchase
        * The service verifies the correctness and completeness of the data (e.g. if the product is present, if the dates are correct, etc...) and sends synchronously to the channel a confirmation or a denial.

        <i>SPECIFICS AND CONTROLS</i>
        * The channel sends in input the fields related to the generic transaction, then in common to all products purchased (PurchaseCart), and the fields related to each product sold (PurchaseData)
        * This API can verify two types of purchase:
          * <strong>Product Purchase</strong> (itemType=PRODUCT):
            For this type of purchase, the field <code>fareTableCellId</code> is required; moreover, if the <code>validityPeriod.trigger.usageTriggerType</code> of the selected product is valorized as "Fixed"(code I, GGMM, GGSE or MM) or "Sale"(code P) and <code>validity.validityPeriodType</code> differs from "Ride" (code C), also startValidity and endValidity are required.
              If the product selected has the <code>scopingGeographicalParameter.geographicalIntervals.scopingValidityParameterType</code> valorized as <strong>GINF</strong>, a valid <strong>geographicalIntervalLimit</strong> must be specified inside the <code>PurchaseData</code> object.
          * <strong>Sales Package Purchase</strong> (itemType=SALESPACKAGE):
            If the <code>validityPeriod.trigger.usageTriggerType</code> of the selected sales package is valorized as "Fixed"(code I, GGMM, GGSE or MM) or "Sale"(code P) and <code>validity.validityPeriodType</code> differs from "Ride" (code C), also startValidity and endValidity are required.

        * <b>startValidity</b> and <b>endValidity</b> must be consistent with the PRODUCT (productID + productVersion) or SALESPACKAGE usageValidity
        * the field <code>mediaId</code> can be omitted only for "VR" mediaType value
        * API verify that the <code>totalAmount</code> corresponds to the sum of the price of each product minus any promotion multiplied by the quantity
        * It also checks that the promotion is valid at the date of purchase
        * If channel sends <code>mediaId</code> and <code>mediaType</code>, the couple have to exist in "Interactive Media Manager".

      operationId: purchaseVerification
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/PurchaseCart'
      responses:
        200:
          description: Purchase data is valid
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        503:
          description: The server is up, but overloaded with requests. Try again later.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /purchases:
    post:
      tags:
        - Purchase Transaction
      summary: Purchase Service.
      description: |
        <i>DESCRIPTION</i>

        The TCI service records a purchase transaction of one or more tariff products or or sales packages.

        <i>FLOW</i>
        * For each ticket purchase event, the channel invokes the service by providing information about the purchase transaction (PurchaseData)
        * The service invokes the appropriate IHB <b>Search /products</b> or IHB <b>Search /salespackages</b> to retrieve  information about the tariff product or sales package intend to purchase, the service verifies the correctness and completeness of the data (e.g. if the product is present, if the dates are correct, etc...) and sends synchronously to the channel a confirmation or a denial.
        * In the positive case the Service publishes on the topic Kafka (CUA) <b>ihbtkt-customeractivity-evl-transactionin</b> the data needed to register the purchase transaction and synchronously sends the transaction identifier (<code>transactionId</code>) to the channel
        * The channel receives asynchronously from the topic Kafka (CUA) <b>ihbtkt-customeractivity-evl-transactionout</b> notification  the result of the transaction registration  with all data relating to it

        <i>SPECIFICS AND CONTROLS</i>
        * The Service verifies the correctness and completeness of the data (e.g. if the product exists, if the dates are correct, etc..)
        * The channel sends in input the fields related to the generic transaction, then in common to all products purchased (PurchaseCart), and the fields related to each product or sales package sold (PurchaseData)
        * This API supports two types of purchase:
          * <strong>Product Purchase</strong> (itemType=PRODUCT):
            For this type of purchase, the field <code>fareTableCellId</code> is required; moreover, if the <code>validityPeriod.trigger.usageTriggerType</code> of the selected product is valorized as "Fixed"(code I, GGMM, GGSE or MM) or "Sale"(code P) and <code>validity.validityPeriodType</code> differs from "Ride" (code C), also startValidity and endValidity are required.
            If the product selected has the <code>scopingGeographicalParameter.geographicalIntervals.scopingValidityParameterType</code> valorized as <strong>GINF</strong>, a valid <strong>geographicalIntervalLimit</strong> must be specified inside the <code>PurchaseData</code> object.
          * <strong>Sales Package Purchase</strong> (itemType=SALESPACKAGE):
            If the <code>validityPeriod.trigger.usageTriggerType</code> of the selected sales package is valorized as "Fixed"(code I, GGMM, GGSE or MM) or "Sale"(code P) and <code>validity.validityPeriodType</code> differs from "Ride" (code C), also startValidity and endValidity are required.
        * <b>startValidity</b> and <b>endValidity</b> must be consistent with the PRODUCT (productID + productVersion) or SALESPACKAGE usageValidity
        * the field <code>mediaId</code> can be omitted only for "VR" mediaType value
        * API verify that the <code>totalAmount</code> corresponds to the sum of the price of each product minus any promotion multiplied by the quantity
        * It also checks that the promotion is valid at the date of purchase
        * If channel sends <code>mediaId</code> and <code>mediaType</code>, the couple have to exist in "Interactive Media Manager"
        * if all the checks are passed, the PurchaseCart object is enriched with transactionID (communicated in a synchronous manner to the channel) and with the MediaID (virtual, if not provided by the Channel)
        * The PurchaseCart/PurchaseData is transformed into the Transaction object (of the CUA) and TicketData and is sent to the IHB (Kafka + CUA) asynchronously.

      operationId: purchase
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/PurchaseCart'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TransactionId'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        503:
          description: The server is up, but overloaded with requests. Try again later.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /resellerPurchases:
    post:
      tags:
        - Purchase Transaction
      summary: Reseller Purchase Service.
      description: |
        <i>DESCRIPTION</i>

        The TCI service records a reseller purchase transaction of one or more tariff products or or sales packages.

        <i>FLOW</i>
        * For each ticket purchase event, the channel invokes the service by providing information about the purchase transaction (PurchaseData)
        * The service invokes the appropriate IHB <b>Search /products</b> or IHB <b>Search /salespackages</b> to retrieve  information about the tariff product or sales package intend to purchase, the service verifies the correctness and completeness of the data (e.g. if the product is present, if the dates are correct, etc...) and sends synchronously to the channel a confirmation or a denial.
        * In the positive case the Service publishes on the topic Kafka (CUA) <b>ihbtkt-customeractivity-evl-transactionin</b> the data needed to register the purchase transaction and synchronously sends the transaction identifier (<code>transactionId</code>) to the channel
        * The channel receives asynchronously from the topic Kafka (CUA) <b>ihbtkt-customeractivity-evl-transactionout</b> notification  the result of the transaction registration  with all data relating to it

        <i>SPECIFICS AND CONTROLS</i>
        * The Service verifies the correctness and completeness of the data (e.g. if the product exists, if the dates are correct, etc..)
        * The channel sends in input the fields related to the generic transaction, then in common to all products purchased (PurchaseCart), and the fields related to each product or sales package sold (PurchaseData)
        * This API supports two types of purchase:
          * <strong>Product Purchase</strong> (itemType=PRODUCT):
            For this type of purchase, the field <code>fareTableCellId</code> is required; moreover, if the <code>validityPeriod.trigger.usageTriggerType</code> of the selected product is valorized as "Fixed"(code I, GGMM, GGSE or MM) or "Sale"(code P) and <code>validity.validityPeriodType</code> differs from "Ride" (code C), also startValidity and endValidity are required.
            If the product selected has the <code>scopingGeographicalParameter.geographicalIntervals.scopingValidityParameterType</code> valorized as <strong>GINF</strong>, a valid <strong>geographicalIntervalLimit</strong> must be specified inside the <code>PurchaseData</code> object.
          * <strong>Sales Package Purchase</strong> (itemType=SALESPACKAGE):
            If the <code>validityPeriod.trigger.usageTriggerType</code> of the selected sales package is valorized as "Fixed"(code I, GGMM, GGSE or MM) or "Sale"(code P) and <code>validity.validityPeriodType</code> differs from "Ride" (code C), also startValidity and endValidity are required.
        * <b>startValidity</b> and <b>endValidity</b> must be consistent with the PRODUCT (productID + productVersion) or SALESPACKAGE usageValidity
        * the field <code>mediaId</code> can be omitted only for "VR" mediaType value
        * API verify that the <code>totalAmount</code> corresponds to the sum of the price of each product minus any promotion multiplied by the quantity
        * It also checks that the promotion is valid at the date of purchase
        * If channel sends <code>mediaId</code> and <code>mediaType</code>, the couple have to exist in "Interactive Media Manager"
        * if all the checks are passed, the PurchaseCart object is enriched with transactionID (communicated in a synchronous manner to the channel) and with the MediaID (virtual, if not provided by the Channel)
        * The PurchaseCart/PurchaseData is transformed into the Transaction object (of the CUA) and TicketData and is sent to the IHB (Kafka + CUA) asynchronously.

      operationId: resellerPurchase
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/PurchaseCart'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TransactionId'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        503:
          description: The server is up, but overloaded with requests. Try again later.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /purchases/{transactionId}:
    delete:
      tags:
        - Purchase Transaction
      summary: Purchase annulment.
      description: |
        <i>DESCRIPTION</i>
        The TCI service registers a sales cancellation transaction.

        <i>FLOW</i>
        * The channel invokes the service by providing the purchase transaction identifier to be canceled (transactionId)
        * The service invokes the IHB <b>GET /transactions/{transactionId}</b> service to verify the existence of the transaction
        * The service invokes the IHB <b>GET /tickets</b> service to verify that the tickets associated with the purchase transaction are not in activated or validated status
        * The service sends a message to the topic Kafka (CUA) <b>ihbtkt-customeractivity-evl-transactionin</b> With the data needed to register the cancellation transaction and notifies the channel that the application is taking charge
        * The channel receives asynchronously from the topic Kafka (CUA) <b>ihbtkt-customeractivity-evl-transactionout</b> notification of the outcome of the transaction registration with all the data relating to it

        <i>SPECIFICS AND CONTROLS</i>
        * The Service verifies the correctness and completeness of the data (e.g. if the transactionId is present and has a UUID format)
        * The service verifies the existence of the sales transaction with the <b>transactionId</b> passed as input
        * If there is a issuing or validation transaction related to the ticket in the subject, the cancellation cannot be made
        * If the controls and checks are successfully passed, a new cancellation transaction is generated and the new transactionId is sent to the IHB (Kafka + CUA)  asynchronously, and the positive result  is synchronously communicated to the channel.
      operationId: purchaseChargeOff
      produces:
        - application/json
      parameters:
        - in: path
          name: transactionId
          type: string
          format: uuid
          required: true
          description: "Unique identification of transaction."
          x-example: "ac85a602-0a88-11e8-b9df-c9e0778a2c0a"
      responses:
        200:
          description: OK
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: The URI requested is invalid or the transaction requested does not exist.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /prePurchases:
    post:
      tags:
        - Purchase Transaction
      summary: Pre-purchase Service.
      description: |
        <i>DESCRIPTION</i>

        The TCI service records a pre-purchase transaction of one or more tariff products or sales packages.

        <i>FLOW</i>
        * For each ticket purchase event, the channel invokes the service by providing information about the purchase transaction (PurchaseData)
        * The service invokes the appropriate IHB <b>Search /products</b> or IHB <b>Search /salespackages</b> to retrieve  information about the tariff product or sales package intend to purchase, the service verifies the correctness and completeness of the data (e.g. if the product is present, if the dates are correct, etc...) and sends synchronously to the channel a confirmation or a denial.
        * In the positive case the Service saves a basket on it's own DB and publishes on the topic Kafka (CUA) <b>ihbtkt-customeractivity-evl-transactionin</b> the data needed to register the pre-purchase transaction and synchronously sends the purchase ref (<code>purchaseRef</code>) to the channel
        * The channel receives asynchronously from the topic Kafka (CUA) <b>ihbtkt-customeractivity-evl-transactionout</b> notification  the result of the transaction registration  with all data relating to it

        <i>SPECIFICS AND CONTROLS</i>
        * The Service verifies the correctness and completeness of the data (e.g. if the product exists, if the dates are correct, etc..)
        * The channel sends in input the fields related to the generic transaction, then in common to all products purchased (PurchaseCart), and the fields related to each product or sales package sold (PurchaseData)
        * This API supports two types of purchase:
          * <strong>Product Purchase</strong> (itemType=PRODUCT):
            For this type of purchase, the field <code>fareTableCellId</code> is required; moreover, if the <code>validityPeriod.trigger.usageTriggerType</code> of the selected product is valorized as "Fixed"(code I, GGMM, GGSE or MM) or "Sale"(code P) and <code>validity.validityPeriodType</code> differs from "Ride" (code C), also startValidity and endValidity are required.
            If the product selected has the <code>scopingGeographicalParameter.geographicalIntervals.scopingValidityParameterType</code> valorized as <strong>GINF</strong>, a valid <strong>geographicalIntervalLimit</strong> must be specified inside the <code>PurchaseData</code> object.
          * <strong>Sales Package Purchase</strong> (itemType=SALESPACKAGE):
            If the <code>validityPeriod.trigger.usageTriggerType</code> of the selected sales package is valorized as "Fixed"(code I, GGMM, GGSE or MM) or "Sale"(code P) and <code>validity.validityPeriodType</code> differs from "Ride" (code C), also startValidity and endValidity are required.
        * <b>startValidity</b> and <b>endValidity</b> must be consistent with the PRODUCT (productID + productVersion) or SALESPACKAGE usageValidity
        * the field <code>mediaId</code> can be omitted only for "VR" mediaType value
        * API verify that the <code>totalAmount</code> corresponds to the sum of the price of each product minus any promotion multiplied by the quantity
        * It also checks that the promotion is valid at the date of purchase
        * If channel sends <code>mediaId</code> and <code>mediaType</code>, the couple have to exist in "Interactive Media Manager"
        * if all the checks are passed, the PurchaseCart object is enriched with transactionID (communicated in a synchronous manner to the channel) and with the MediaID (virtual, if not provided by the Channel)
        * The PurchaseCart/PurchaseData is transformed into the Transaction object (of the CUA) and TicketData and is sent to the IHB (Kafka + CUA) asynchronously.

      operationId: prePurchase
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/PurchaseCart'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/PurchaseRef'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        503:
          description: The server is up, but overloaded with requests. Try again later.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /prePurchases/confirmation:
    post:
      tags:
        - Purchase Transaction
      summary: Pre-purchase Confirmation Service.
      description: |
        <i>DESCRIPTION</i>

        The TCI service records a purchase transaction of one or more tariff products or sales packages.

        <i>FLOW</i>
        * The channel invokes the service by providing information about the purchase transaction to confirm (PrePurchaseConfirmation)
        * The service retieves the related purchase basket using the received <code>purchaseRef</code> and, if the exists, apply the received information (result, reason, etc..) and update the basket on it's own DB
        * The service publishes on the topic Kafka (CUA) <b>ihbtkt-customeractivity-evl-transactionin</b> the data needed to register the purchase transaction and synchronously sends the transaction identifier (<code>transactionId</code>) to the channel; if the received result is "CANCELED", the service will not send a purchase transaction to the IHB, but will send a cancel transaction about the registered pre-purchase transaction 
        * The channel receives asynchronously from the topic Kafka (CUA) <b>ihbtkt-customeractivity-evl-transactionout</b> notification the result of the transaction registration  with all data relating to it

        <i>SPECIFICS AND CONTROLS</i>
        * The Service verifies the correctness and completeness of the data (e.g. if the basket exists, if the dates are correct, etc..)

      operationId: prePurchaseConfirmation
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/PrePurchaseConfirmation'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TransactionId'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        503:
          description: The server is up, but overloaded with requests. Try again later.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /prePurchases/epurseConfirmation:
    post:
      tags:
        - Purchase Transaction
      summary: Pre-purchase Epurse Confirmation Service.
      description: |
        <i>DESCRIPTION</i>

        The TCI service records a purchase transaction of one or more tariff products or sales packages.

        <i>FLOW</i>
        * The channel invokes the service by providing information about the purchase transaction to confirm (PrePurchaseConfirmation)
        * The service retieves the related purchase basket using the received <code>purchaseRef</code> and, if the exists, apply the received information (result, reason, etc..) and update the basket on it's own DB
        * The service publishes on the topic Kafka (CUA) <b>ihbtkt-customeractivity-evl-transactionin</b> the data needed to register the purchase transaction and synchronously sends the transaction identifier (<code>transactionId</code>) to the channel; if the received result is "CANCELED", the service will not send a purchase transaction to the IHB, but will send a cancel transaction about the registered pre-purchase transaction 
        * The channel receives asynchronously from the topic Kafka (CUA) <b>ihbtkt-customeractivity-evl-transactionout</b> notification the result of the transaction registration  with all data relating to it

        <i>SPECIFICS AND CONTROLS</i>
        * The Service verifies the correctness and completeness of the data (e.g. if the basket exists, if the dates are correct, etc..)

      operationId: prePurchaseEpurseConfirmation
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/PrePurchaseConfirmation'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TransactionId'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        503:
          description: The server is up, but overloaded with requests. Try again later.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /enabledPaymentGateway:
    get:
      tags:
        - Purchase Transaction
      summary: Enabled Payment Gateway Service.
      description: |
        <i>DESCRIPTION</i>

        The service returns a list of enabled payment gateways.

        <i>FLOW</i>
        * The channel invokes the service
        * The service a list of enabled payment gateways

        <i>SPECIFICS AND CONTROLS</i>
      

      operationId: enabledPaymentGateway
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/EnabledPaymentGateway'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        503:
          description: The server is up, but overloaded with requests. Try again later.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /prePurchaseTopUpEpurse:
    post:
      tags:
        - Purchase Transaction
      summary: Pre-purchase Top-up E-purse Service.
      description: |
        <i>DESCRIPTION</i>

        The TCI service records a Top-up E-purse pre-purchase.

        <i>FLOW</i>
        * through the owner type (reseller or customer) in input the service identifies the owner id
        * The service calls the E-purse API (with owner id in input) to retrieve the epurse id.
        * The service checks that the total amount and the recharge cuts passed in input are valid.
        * If the checks do not give an error, the service saves the epurchasebasket record on the db.
        * Finally, if the codGateway in input is not empty, it manages the payment gateway process:
          * If the owner is a customer -> the service calls the customer data API to retrieve the data necessary for the payment
          * If the owner is a reseller-> the service calls the common touchpoint configuration API to retrieve the data necessary for the payment

        <i>SPECIFICS AND CONTROLS</i>
        * The Service verifies the correctness and completeness of the data 
        * The channel sends in input the fields related to the total to recharge (EpursePurchaseCart), and the fields related to each top-up cut (amount and quantity)
        * The service check: that the input cuts are valid and that the total amount corresponds to the sum of the cuts
        * Moreover, if the check is enabled (from configuration), the service checks that the total requested is less than or equal to the daily, weekly and monthly residual
      

      operationId: prePurchaseTopUpEpurse
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/EpursePurchaseCart'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/PurchaseRef'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        503:
          description: The server is up, but overloaded with requests. Try again later.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /purchaseTopUpEpurse:
    post:
      tags:
        - Purchase Transaction
      summary: Purchase Top-up E-purse Service.
      description: |
        <i>DESCRIPTION</i>
        The service manages an e-purse top-up transaction.
        
        <i>FLOW</i>
        * Through the owner type (reseller or customer) in input the service identifies the owner id
        *  The service calls the E-purse API (with owner id) to retrieve the epurse id.
        *  The service checks that the total amount and the recharge cuts passed in input are valid.
        *  If the checks do not give an error, the service creates an object of type transactionTopUp with the input data
        * Finally, send the message on the topic ihbtkt-electronicpursemng-evl-epursein with the TransactionTopUp object
        
        <i>SPECIFICS AND CONTROLS</i>
        * The Service verifies the correctness and completeness of the data 
        * The channel sends in input the fields related to the total to recharge (EpursePurchaseCart), and the fields related to each top-up cut (amount and quantity)
        * The service check: that the input cuts are valid and that the total amount corresponds to the sum of the cuts
        * Moreover, if the check is enabled (from configuration), the service checks that the total requested is less than or equal to the daily, weekly and monthly residual
      operationId: purchaseTopUpEpurse
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/EpursePurchaseCart'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TransactionTopUpResponse'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        503:
          description: The server is up, but overloaded with requests. Try again later.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /tickets/{ticketId}:
    get:
      tags:
        - Ticket & List
      summary: Get data of a ticket.
      description: |
        <i>DESCRIPTION</i>
        The TCI Search service and return the data to a ticket (ticketId).
        The field <code>salesPackage</code> is valorized if and only if the ticket is related to a Sales Package purchase.

        <i>FLOW</i>
        *  The channel invokes the service to have data about a Ticket of interest, setting the required data
        *  The service invokes the appropriate IHB (CUA) <b>GET /tickets/{ticketId}</b> service to get the ticket data requested
        *  The service returns to the channel, for the requested ticket, all the information contained in the ticketData object

        <i>SPECIFICS AND CONTROLS</i>
        *  Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        *  Verify that the ticket identifier in the path and the proof of purchase they are  match

      operationId: getTicketData
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ticketId
          in: path
          description: Ticket unique identifier
          required: true
          type: string
          format: uuid
        - name: X-WTF-TICKET-PROOF-OF-PURCHASE
          in: header
          description: 'The proof of purchase of the ticket, Base64 encoded'
          required: true
          type: string
      responses:
        200:
          description: Ticket found
          schema:
            $ref: '#/definitions/TicketData'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: The URI requested is invalid or the ticket is not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /ticketsByTransactionId/{transactionId}:
    get:
      tags:
        - Ticket & List
      summary: Get data of a ticket by transaction id.
      description: ""
      operationId: getTicketDataByTransactionId
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: transactionId
          in: path
          description: Transaction unique identifier
          required: true
          type: string
        - name: pageNumber
          in: query
          description: 'Determines the result index to start searching from. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageSize
          in: query
          description: 'Determines the number of elements to return. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
      responses:
        200:
          description: Ticket found
          schema:
            type: array
            items:
              $ref: '#/definitions/TicketData'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: The URI requested is invalid or the ticket is not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /tickets/{ticketId}/refreshAllowed:
    get:
      tags:
        - Ticket & List
      summary: Check the ticket.
      description: |
        <i>DESCRIPTION</i>
        The TCI service allows the (Host card emulation ) HCE channel to generate/refresh a token required to activate a specific ticket (ticketId) purchased by the customer.

        <i>FLOW</i>
        *  The channel CHE calls the service requesting permission to generate a token for a ticket, setting the required data
        *  The Service calls the appropriate IHB service (CUA) <b>GET /tickets/{ticketId}</b> to verify the existence of the ticket
        *  In case the ticket exists, the service authorizes the HCE channel to generate/refresh the Token

        <i>SPECIFICS AND CONTROLS</i>
        *  Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        *  Verify that the ticket identifier in the path and the proof of purchase they are match .
        *  Check that the activationRequired parameter contained in the proof of purchase is set to True
        *  checking the consistency between the value of availableFrom contained in the proof of purchase and the parameter of the ticket validity dates.

      operationId: allowRefreshToken
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ticketId
          in: path
          description: Ticket unique identifier
          required: true
          type: string
          format: uuid
        - name: X-WTF-TICKET-PROOF-OF-PURCHASE
          in: header
          description: 'The proof of purchase of the ticket, Base64 encoded'
          required: true
          type: string
      responses:
        200:
          description: Ticket found and refresh allowed
        403:
          description: Ticket found but refresh not allowed
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: Ticket not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /tickets/{ticketId}/issued:
    put:
      tags:
        - Issuing/Validation Transaction
      summary: Notification of an issuing event.
      description: |
        <i>DESCRIPTION</i>
        The TCI Service active / materializes a Ticket to a virtual media (eg. HCE) or physical (eg. Smart card)

        <i>FLOW</i>
        * Channel requires activation (issuing) a ticket, sending the ID (identifier), proof of purchase and other necessary information
        * The public service on the topic Kafka (CUA) queuing.mms.in. Transaction. v1 The data needed to record the transaction of issuing (activation) and notification to the channel  taking charge of the request
        * The channel receives asynchronously from the topic Kafka (CUA) <b>ihbtkt-customeractivity-evl-transactionout</b> notification that the ticket has been activated with all Information about

        <i>SPECIFICS AND CONTROLS</i>
        * The service performs the formal checks (syntactic correctness and presence of mandatory parameters) and substantive on the input data
        * Checks that the <b>IssuanceData</b> object has at least one of the <b>mediaId</b>, <b>mediaExtCode</b>, and <b>hceDeviceId</b>
        * Activation is done even if the mediaId does not exist, motivating it in the notes
        * the <b>mediaExtCode</b> can be a string of multiple characters separated by commas, in this case the search uses all the strings as search parameters and the returned elements take the first one, in date order
        * It is checked  the equality of ticket identifiers (path, proof of purchase, IssuanceData) present in the input request.

      operationId: notifyIssuedTicket
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ticketId
          in: path
          description: Ticket unique identifier
          required: true
          type: string
          format: uuid
        - name: X-WTF-TICKET-PROOF-OF-PURCHASE
          in: header
          description: 'The proof of purchase of the ticket, Base64 encoded'
          required: true
          type: string
        - in: body
          name: body
          description: Notification object containing issuance data
          required: true
          schema:
            $ref: '#/definitions/IssuanceNotification'
      responses:
        '200':
          description: Ticket found and put to Issued status
        '400':
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        '403':
          description: 'The request is understood, but it has been refused or access is not allowed.'
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        '404':
          description: The URI requested is invalid or the resource requested does not exist.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  '/tickets/{ticketId}/validated':
    put:
      tags:
        - Issuing/Validation Transaction
      summary: Notification of a validation event.
      description: |
        <i>DESCRIPTION</i>
        The TCI Service verifies the proof of purchase of a ticket and records the validation transaction.

        <i>FLOW</i>
        * The HCE Channel requires validation of a Ticket, sending the identifier, proof of purchase and other necessary information
        * The Service publishes on the topic Kafka topic (CUA)  ihbtkt-customeractivity-evl-transactionin The data needed to record the validation transaction and notify the channel of the  taking charge of the request
        * The channel receives asynchronously by topic Kafka (CUA) ihbtkt-customeractivity-evl-transactionout the notification of the outcome of the transaction registration

        <i>SPECIFICS AND CONTROLS</i>
        * The service performs the formal checks (syntactic correctness and presence of mandatory parameters) and substantive on the input data
        * check that the IssuanceData object contains at least one of mediaId, mediaExtCode and hceDeviceId
        * Verifies the existence of mediaId in the Interactive Media Manager, using mediaExtCode or hceDeviceId if the mediaId has not been set
        * Validation is done even if the mediaId does not exist, motivating it in the notes
        * the <b>mediaExtCode</b> can be a string of multiple characters separated by commas, in this case the search uses all the strings as search parameters and the returned elements take the first one, in date order
        * It is checked  the equality of ticket identifiers (path, proof of purchase, IssuanceData) present in the input request.

      operationId: notifyValidatedTicket
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ticketId
          in: path
          description: Ticket unique identifier
          required: true
          type: string
          format: uuid
        - name: X-WTF-TICKET-PROOF-OF-PURCHASE
          in: header
          description: 'The proof of purchase of the ticket, Base64 encoded'
          required: true
          type: string
        - in: body
          name: body
          description: Notification object containing event data and validation data
          required: true
          schema:
            $ref: '#/definitions/ValidationNotification'
      responses:
        '200':
          description: Ticket found and put to Validated status
        '400':
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        '403':
          description: 'The request is understood, but it has been refused or access is not allowed.'
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        '404':
          description: The URI requested is invalid or the resource requested does not exist.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  '/tickets/validated':
    put:
      tags:
        - Issuing/Validation Transaction
      summary: Notification of a validation for non HCE events.
      deprecated: true
      description: |
        <i>DESCRIPTION</i>
        The TCI service registers a validation transaction of a Ticket (without proof of purchase).

        <i>FLOW</i>
        * The Channel requires to record the validation of a ticket, providing all the relevant information
        * The Service publishes on the topic Kafka (CUA) <b>queuing.mms.in. transaction.v1</b> The data needed to record the validation transaction and notify the channel  of the taking charge of the request
        * The channel receives asynchronously by topic Kafka (CUA) <b>ihbtkt-customeractivity-evl-transactionout</b> the notification of the transaction log with all the data related to it

        <i>SPECIFICS AND CONTROLS</i>
        * The service performs the formal checks (syntactic correctness and presence of mandatory parameters) and substantive on the input data
        * Checks that the <b>IssuanceData</b> object has at least one of the mediaId, mediaExtCode, and hceDeviceId
        * Checks the existence of mediaId, using mediaExtCode or hceDeviceId if the mediaId has not been set as input
        * Validation is done even if the mediaId does not exist, motivating it in the notes
        * the <b>mediaExtCode</b> can be a string of multiple characters separated by commas, in this case the search uses all the strings as search parameters and the returned elements take the first one, in date order
        * It is checked the equality of ticket identifiers (path, proof of purchase, IssuanceData) present in the input request.
        * The eventData.infrastructureList must contain at least a Stop Point element (i.e. with type "STOPPOINT") or a Line element (i.e. with type "LINE").
      operationId: notifyValidation
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Notification object containing validation data
          required: true
          schema:
            $ref: '#/definitions/ValidationNotification'
      responses:
        '200':
          description: Validation event for non HCE request successfully submitted
        '400':
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        '403':
          description: 'The request is understood, but it has been refused or access is not allowed.'
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  '/tickets/validated/bulk':
    put:
      tags:
        - Issuing/Validation Transaction
      summary: Notification of a list of validation events.
      description: |
        <i>DESCRIPTION</i>
        The TCI service registers a list of validation transactions.

        <i>FLOW</i>
        * The Channel requires to record a list of validation for one or more tickets, providing all the relevant information
        * The service performs the formal checks (syntactic correctness and presence of mandatory parameters) and substantive on the input data
        * The Service publishes on the topic Kafka (CUA) <b>ihbtkt-customeractivity-evl-transactionin</b> the data needed to record the validation transaction and notify the channel  of the taking charge of the request

        <i>SPECIFICS AND CONTROLS</i>
        
        * The ticketId is mandatory.
        * eventsData.codeValidationEvent in mandatory
        * eventsData.eventOutcome is mandatory
        * The eventData.sessionId is used to correlate multiple events to the same trip: the CHECKIN and the CHECKOUT of a trip need to have the same sessionId
        * If the list of events transmitted concern several trips for the same ticketId, customerId or mediaId the sessionId is mandatory
        * The validationData.serviceMode is mandatory
        * The validationData.serviceProvider is mandatory
        * The travelsummary.duration parameter is used to indicate the temporal duration of a trip. In this case it is also mandatory to specify the unit of measure in the travelsummary.durationUnit parameter.
        * If the duration is not indicated, the difference between the checkin eventDate and the checkout eventDate will be used to calculate it
        * The travelsummary.distance parameter is used to indicate the traveled distance during a trip. In this case it is also mandatory to specify the unit of measure in the travelsummary.distanceUnit parameter
        * If the distance is not indicated and the checkin and checkout events have the InfrastructureList populated with the start and end Stoppoint on the network then, if possible, the distance will be calculated as the distance between the two stoppoints on the network
      operationId: notifyValidationBulk
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Notification object containing validation data
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/ValidationNotification'
      responses:
        '200':
          description: list of results of events processed successfully and with error
          schema:
            $ref: '#/definitions/ValidationResponse'
        '400':
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        '403':
          description: 'The request is understood, but it has been refused or access is not allowed.'
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  '/tickets/inspected':
    put:
      tags:
        - Issuing/Validation Transaction
      summary: Notification of an inspection event.
      description: 'Store an inspection transaction. The <code>eventData.infrastructureList</code> <b>must</b> contain a Device element (i.e. "DEVICE") and one between Stop Point element (i.e. with type "STOPPOINT") and Line element (i.e. with type "LINE").'
      operationId: notifyInspectedTicket
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Notification object containing event data and inspection data
          required: true
          schema:
            $ref: '#/definitions/InspectionNotification'
      responses:
        '200':
          description: Ticket found and notified inspection.
        '400':
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        '403':
          description: 'The request is understood, but it has been refused or access is not allowed.'
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  '/tickets/whitelist':
    post:
      tags:
        - Ticket & List
      summary: Add a ticket to the whitelist.
      description: |

        <i>DESCRIPTION</i>
        The TCI service requires the insertion of a ticket (ticketId) into the whitelist. The whitelist represents the set of tickets purchased, but still not materialized on physical support.

        <i>FLOW</i>
        *  The channel calls the service by setting the required data
        *  The service invokes the IHB <b>/tickets/{ticketId}</b> service to check if the ticket exists and if the media provided in input from the channel is the same that is associated with Ticket
          *  If the media is different, call the IHB (MLC) <b>/media/events/locked/{mediaId}</b> service to verify that this is blacklisted, if not an error message will be returned

        *  The Service sends a message to the topic Kafka (CUA) queuing.mms.in.ticketlist.v1 with the data necessary for the request to be inserted in the whitelist and to notify the Channel of taking charge of the request
        *  The channel receives from the topic Kafka (CUA) queuing.mms.out.ticketlist.v1 notification of the result of whitelist insertion

        <i>SPECIFICS AND CONTROLS</i>
        *  Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        *  It is mandatory that at least one of the touchPointId or deviceId is present

      operationId: addTicketToWhitelist
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Notification object containing whitelist data. One between touchPointId and deviceId must be valorized.
          required: true
          schema:
            $ref: '#/definitions/TicketListData'
      responses:
        '200':
          description: Notified message for adding ticket to whitelist
        '400':
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        '403':
          description: 'The request is understood, but it has been refused or access is not allowed.'
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
    get:
      tags:
        - Ticket & List
      summary: 'Get list of whitelist data'
      description: |
        <i>DESCRIPTION</i>
        The TCI service returns a list of tickets in the Whitelist and matches the search criteria set

        <i>FLOW</i>
        *  The Channel calls the service by setting the required parameters and any other parameters that are not required
        *  The service invokes the appropriate service of the IHB (CUA) <b>GET /ticketlist</b> (with the "listTypeCode" parameter set for the whitelist (WL)), to get the list of tickets associated with the related media present in whitelist
        *  The Service returns to the Channel the list of tickets corresponding to the parameters set

        <i>SPECIFICS AND CONTROLS</i>
        *  Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        *  Pagination parameters, <code>pageNumber</code> and <code>pageSize</code>, are <b>required</b>
        *  (<code>pageNumber</code> * <code>pageSize</code>) must be less than the maximum value. The maximum allowed value is <b>10000</b>
        *  If the <code>pageActionCount</code> parameter is set to "true", the service does not take into account the other set parameters (except mediaId, if present)and returns an empty body and the number of elements found
        *  If the <code>pageActionCount</code> parameter is set to "false", or is not present, the service returns the list with the item data in the body that meet the search criteria.

      operationId: searchWhitelist
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pageNumber
          in: query
          description: 'Determines the result index to start searching from. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageSize
          in: query
          description: 'Determines the number of elements to return. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageActionCount
          in: query
          description: 'Enabling count mode the service will return, in header X-WTF-PAGING-TOTAL-ELEMENTS, only the number of occurrences with no filters applied, any query parameters will be ignored; the body of the response will be null'
          required: false
          type: boolean
        - name: ticketId
          in: query
          description: 'Ticket unique identifier'
          type: string
        - name: mediaId
          in: query
          description: 'Media unique identifier'
          type: string
        - name: touchPointId
          in: query
          description: 'Touchpoint unique identifier'
          type: string
        - name: deviceId
          in: query
          description: 'Device unique identifier'
          type: string
      responses:
        200:
          headers:
            X-WTF-PAGING-TOTAL-PAGES:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE-SIZE:
              type: integer
              format: int32
            X-WTF-PAGING-TOTAL-ELEMENTS:
              type: integer
              format: int32
          description: Whitelist data found
          schema:
            type: array
            items:
              $ref: '#/definitions/TicketListData'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: Whitelist data not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  '/tickets/whitelist/{ticketId}/{mediaId}':
    delete:
      tags:
        - Ticket & List
      summary: Remove a ticket from the whitelist.
      description: |
        <i>DESCRIPTION</i>
        The TCI service deletes a ticket from the whitelist because it is materialized on media or canceled.
        If the ticket is not in whitelist or it is not associated in whitelist with the specified mediaId, a not found message will be returned.

        <i>FLOW</i>
        *  The channel calls the service by setting the required data
        *  The service invokes the appropriate IHB (CUA) <b>GET /ticketlist</b> (with the "listTypeCode" parameter set for the whitelist (WL)) service to verify that the ticketId specified in the input is present in the whitelist and associated in the mediaId specified in input
        *  The service sends a message to the topic Kafka (CUA) queuing.mms.in.ticketlist.v1
          Requiring the ticket to be removed from the whitelist
        *  The channel receives from the topic Kafka (CUA) queuing.mms.out.ticketlist.v1 notification of deletion result

        <i>SPECIFICS AND CONTROLS</i>
        *  Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters).

      operationId: removeTicketFromWhitelist
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ticketId
          in: path
          description: Ticket unique identifier
          required: true
          type: string
        - name: mediaId
          in: path
          description: Media unique identifier
          required: true
          type: string
      responses:
        '200':
          description: Notified message for removing ticket from whitelist
        '400':
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        '404':
          description: The URI requested is invalid or the ticket requested does not exist in whitelist.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  '/tickets/blacklist':
    post:
      tags:
        - Ticket & List
      summary: Add a ticket to the blacklist.
      description: |

        <i>DESCRIPTION</i>
        The TCI service requires the insertion of a ticket (ticketId) into the blacklist.

        <i>FLOW</i>
        *  The channel calls the service by setting the required data
        *  The service invokes the IHB <b>/tickets/{ticketId}</b> service to check if the ticket exists and if the media provided in input from the channel is the same that is associated with Ticket
          *  If the media is different, call the IHB (MLC) <b>/media/events/locked/{mediaId}</b> service to verify that this is blacklisted, if not an error message will be returned

        *  The Service sends a message to the topic Kafka (CUA) queuing.mms.in.ticketlist.v1 with the data necessary for the request to be inserted in the blacklist and to notify the Channel of taking charge of the request
        *  The channel receives from the topic Kafka (CUA) queuing.mms.out.ticketlist.v1 notification of the result of blacklist insertion

        <i>SPECIFICS AND CONTROLS</i>
        *  Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        *  It is mandatory that at least one of the touchPointId or deviceId is present

      operationId: addTicketToBlacklist
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Notification object containing blacklist data. One between touchPointId and deviceId must be valorized.
          required: true
          schema:
            $ref: '#/definitions/TicketListData'
      responses:
        '200':
          description: Notified message for adding ticket to blacklist
        '400':
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        '403':
          description: 'The request is understood, but it has been refused or access is not allowed.'
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
    get:
      tags:
        - Ticket & List
      summary: 'Get list of blacklist data'
      description: |
        <i>DESCRIPTION</i>
        The TCI service returns a list of tickets in the Blacklist and matches the search criteria set

        <i>FLOW</i>
        *  The Channel calls the service by setting the required parameters and any other parameters that are not required
        *  The service invokes the appropriate service of the IHB (CUA) <b>GET /ticketlist</b> (with the "listTypeCode" parameter set for the blacklist (BL)), to get the list of tickets associated with the related media present in blacklist
        *  The Service returns to the Channel the list of tickets corresponding to the parameters set

        <i>SPECIFICS AND CONTROLS</i>
        *  Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        *  Pagination parameters, <code>pageNumber</code> and <code>pageSize</code>, are <b>required</b>
        *  (<code>pageNumber</code> * <code>pageSize</code>) must be less than the maximum value. The maximum allowed value is <b>10000</b>
        *  If the <code>pageActionCount</code> parameter is set to "true", the service does not take into account the other set parameters (except mediaId, if present)and returns an empty body and the number of elements found
        *  If the <code>pageActionCount</code> parameter is set to "false", or is not present, the service returns the list with the item data in the body that meet the search criteria.

      operationId: searchBlacklist
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pageNumber
          in: query
          description: 'Determines the result index to start searching from. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageSize
          in: query
          description: 'Determines the number of elements to return. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageActionCount
          in: query
          description: 'Enabling count mode the service will return, in header X-WTF-PAGING-TOTAL-ELEMENTS, only the number of occurrences with no filters applied, any query parameters will be ignored; the body of the response will be null'
          required: false
          type: boolean
        - name: ticketId
          in: query
          description: 'Ticket unique identifier'
          type: string
        - name: mediaId
          in: query
          description: 'Media unique identifier'
          type: string
        - name: touchPointId
          in: query
          description: 'Touchpoint unique identifier'
          type: string
        - name: deviceId
          in: query
          description: 'Device unique identifier'
          type: string
      responses:
        200:
          headers:
            X-WTF-PAGING-TOTAL-PAGES:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE-SIZE:
              type: integer
              format: int32
            X-WTF-PAGING-TOTAL-ELEMENTS:
              type: integer
              format: int32
          description: Blacklist data found
          schema:
            type: array
            items:
              $ref: '#/definitions/TicketListData'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: TicketList data not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  '/tickets/blacklist/{ticketId}':
    delete:
      tags:
        - Ticket & List
      summary: Remove a ticket from the blacklist.
      description: |
        <i>DESCRIPTION</i>
        The TCI service deletes a ticket from the blacklist.
        If the ticket is not in blacklist or it is not associated in blacklist with the specified mediaId, a not found message will be returned.

        <i>FLOW</i>
        *  The channel calls the service by setting the required data
        *  The service invokes the appropriate IHB (CUA) <b>GET /ticketlist</b> (with the "listTypeCode" parameter set for the blacklist (BL)) service to verify that the ticketId specified in the input is present in the blacklist and associated in the mediaId specified in input
        *  The service sends a message to the topic Kafka (CUA) queuing.mms.in.ticketlist.v1
          Requiring the ticket to be removed from the blacklist
        *  The channel receives from the topic Kafka (CUA) queuing.mms.out.ticketlist.v1 notification of deletion result

        <i>SPECIFICS AND CONTROLS</i>
        *  Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters).

      operationId: removeTicketFromBlacklist
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ticketId
          in: path
          description: Ticket unique identifier
          required: true
          type: string
        - name: mediaId
          in: query
          description: 'Media unique identifier'
          type: string
      responses:
        '200':
          description: Notified message for removing ticket from blacklist
        '400':
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        '404':
          description: The URI requested is invalid or the ticket requested does not exist in blacklist.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /refund:
    post:
      tags:
        - Purchase Refund
      summary: Purchase Service.
      description: |
        <i>DESCRIPTION</i>

        The TCI service records a refund transaction of one or more tariff products or sales packages.

      operationId: refund
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/RefundData'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TransactionRefund'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        503:
          description: The server is up, but overloaded with requests. Try again later.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /changeCompensation:
    post:
      tags:
        - Change Compensation
      summary: Change Compensation.
      description: |
        <i>DESCRIPTION</i>

        The TCI service records a change compensation transaction by providing input to the purchase transaction.
        
        <i>FLOW</i>
        * The channel invokes the service by passing in input a purchase transaction id, an amount and a workshiftId.
        * The service verifies the existence of the purchase passed in input.
        * The service return records a change compensation transaction.

      operationId: changeCompensation
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ChangeCompensationData'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TransactionChangeCompensation'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Internal server error.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        503:
          description: The server is up, but overloaded with requests. Try again later.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /missingPayoutChange/{transactionId}:
    get:
      tags:
        - Change Compensation
      summary: Missing Payout Change.
      description: |
        <i>DESCRIPTION</i>
        The service returns the amount of the missing payout

        <i>FLOW</i>
        *  The channel invokes the service by providing input to the transaction purchase identifier (<b>transactionId</b>)
        *  The Service invokes the appropriate service of IHB (CUA) <b>GET /transactions/{transactionId}</b> to verify the existence of the transaction and retrieve the information necessary.
        *  The Service invokes the appropriate service of IHB (CUA) <b>GET /searchTransactions</b> to make sure a CCM transaction doesn't already exist for that purchase.
        *  The Service returns to the Channel the detailed information relating to the amount of the missing payout
        * If the data of the purchase transaction do not satisfy all the checks, the service returns an amount equal to zero and in the notes the error message.

        <i>SPECIFICS AND CONTROLS</i>
        *  Checks that the call is present the required parameter <b>transactionId</b>
        *  Checks that a purchase transaction exists with the input id by calling the cua service
        *  Checks that the result of the purchase transaction is in success and that the missingPayoutChange is greater than zero
        * Checks that the purchase transaction is not already registered as a related transaction of some transaction, by calling the CUA service.
      

      operationId: missingPayoutChange
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: transactionId
          in: path
          required: true
          description: Unique identification of transaction.
          type: string
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/MissingPayoutChange'
        '404':
          description: Transaction Purchase not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /journeys:
    get:
      tags:
        - Account Based
      summary: 'Get list of Journeys'
      description: |

        <i>DESCRIPTION</i>
        The TCI service search and returns the number or list of matching certain journey search parameters.

        <i>FLOW</i>
        *  The channel invokes the service by providing at least the required search parameters
        *  The service calls the appropriate IHB (CUA) <b>GET /journeys</b> service to get the list of the journeys of interest
        *  The service returns to the channel the search result

        <i>SPECIFICS AND CONTROLS</i>
        * Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        * Pagination paramertes, <code>pageNumber</code> and <code>pageSize</code>, are <b>required</b>
        * (<code>pageNumber</code> * <code>pageSize</code>) must be less than the maximum value. The maximum allowed value is <b>10000</b>
        * Parameters <code>partyAccountId</code>, <code>closingDateStart</code> and <code>closingDateEnd</code> are <b>required</b>
        * If the <code>pageActionCount</code> is set to "true", the service does not consider, the other parameters set (except for the partyAccountId, that must be present anyway) and returns an empty body and the number of elements found
        * If the <code>pageActionCount</code> is set to "false", or is not present, the service returns in the body the list with the item data, that meet the search criteria

      operationId: searchJourneys
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pageNumber
          in: query
          description: 'Determines the result index to start searching from. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageSize
          in: query
          description: 'Determines the number of elements to return. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageActionCount
          in: query
          description: 'Enabling count mode the service will return, in header X-WTF-PAGING-TOTAL-ELEMENTS, only the number of occurrences with no filters applied, any query parameters will be ignored, <b>except for "partyAccountId"</b> parameter; the body of the response will be empty'
          required: false
          type: boolean
        - name: partyAccountId
          in: query
          description: 'Party account (customer) identifier to find the journeys associated with; it is possible to specify one or more id separated by a comma.'
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: closingDateStart
          in: query
          description: 'Beginning of the interval in which the closingDate must be contained; Format "YYYY-MM-DD" (ISO 8601).'
          required: true
          type: string
          format: date
          x-example: '2018-10-30'
        - name: closingDateEnd
          in: query
          description: 'End of the interval in which the closingDate must be contained; Format "YYYY-MM-DD" (ISO 8601).'
          required: true
          type: string
          format: date
          x-example: '2018-10-30'
        - name: statuses
          in: query
          description: 'The statuses of the journeys to find; it is possible to specify one or more id separated by a comma.'
          required: false
          type: string
          default: OPEN,CLOSED
          collectionFormat: csv

      responses:
        200:
          headers:
            X-WTF-PAGING-TOTAL-PAGES:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE-SIZE:
              type: integer
              format: int32
            X-WTF-PAGING-TOTAL-ELEMENTS:
              type: integer
              format: int32
          description: Journeys found
          schema:
            type: array
            items:
              $ref: '#/definitions/JourneyGroup'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: Journeys not found

  /journeys/validations/summaries:
    post:
      tags:
        - Account Based
      summary: 'Send a list of summaries for account based customers'
      description: |

        <i>DESCRIPTION</i>
        The TCI service receives and stores the summaries of the account based validations performed by specific customers in specific periods. This data tells the "Account Based Engine" when stopping the elaboration for a specific period and is possible to proceed with the finalization of the purchase.

        <i>FLOW</i>
        * The Channel requires to record a list of summaries, providing all the relevant information
        * The Service publishes the summaries on the relative CUA topic Kafka to record the data in the Account Based System.

        <i>SPECIFICS AND CONTROLS</i>
        * The service performs the formal checks (syntactic correctness and presence of mandatory parameters) and substantive on the input data

      operationId: createAccountBasedVldSummaries
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: List of objects containing data summary
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/AccountBasedSummarySession'
      responses:
        200:
          description: Validations summaries successfully submitted
          schema:
            $ref: '#/definitions/AccountBasedSummaryResponse'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /extendedDistanceMatrix:
    get:
      tags:
        - Extended Distance Matrix
      summary: 'Get list of Extended Distance Matrix'
      description: |
        
        <i>DESCRIPTION</i>
        IHB search and returns the number or list of matching certain ExtendedDistanceMatrix search parameters.
        
        <i>FLOW</i> 
        * The TCI with <b>GET /extendedDistanceMatrix</b> calls the Service to get the list of ExtendedDistanceMatrix of interest
        * The IHB service returns to TCI or the sheer number of list elements or all the elements of the list corresponding to the set parameters
        
        <i>SPECIFICS AND CONTROLS</i>
        * Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        * Pagination parameters, <code>pageNumber</code> and <code>pageSize</code>, are <b>required</b>
        * (<code>pageNumber</code> * <code>pageSize</code>) must be less than the maximum value. The maximum allowed value is <b>10000</b>
        * If the <code>pageActionCount</code> is set to "true", the service does not consider, the other parameters set and returns an empty body and the number of elements found
        * If the <code>pageActionCount</code> is set to "false", or is not present, the service returns in the body the list with the item data,  that meet the search criteria

      operationId: searchExtendedDistanceMatrix
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pageNumber
          in: query
          description: 'Determines the result index to start searching from. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageSize
          in: query
          description: 'Determines the number of elements to return. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageActionCount
          in: query
          description: 'Enabling count mode the service will return, in header X-WTF-PAGING-TOTAL-ELEMENTS, only the number of occurrences with no filters applied, any query parameters will be ignored; the body of the response will be empty'
          required: false
          type: boolean
        - name: lineId
          in: query
          description: 'Line unique identifier'
          required: false
          type: string
        - name: serviceProvider
          in: query
          description: 'Service provider'
          required: false
          type: string
        - name: originElementRef
          in: query
          description: 'Unique origin stop point identifier'
          required: false
          type: string
        - name: destinationElementRef
          in: query
          description: 'Unique destination stop point identifier'
          required: false
          type: string
        - name: distanceFrom
          in: query
          description: 'Distance in KM between O/D - Range From'
          required: false
          type: integer
        - name: distanceTo
          in: query
          description: 'Distance in KM between O/D - Range To'
          required: false
          type: integer
        - name: serviceMode
          in: query
          description: >
            Service mode. Possible values:
              * 01.00 - RAIL
              * 05.00 - METRO
              * 07.00 - BUS
          required: false
          type: string
          enum:
            - '01.00'
            - '05.00'
            - '07.00'
      responses:
        200:
          headers:
            X-WTF-PAGING-TOTAL-PAGES:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE-SIZE:
              type: integer
              format: int32
            X-WTF-PAGING-TOTAL-ELEMENTS:
              type: integer
              format: int32
          description: Extended Distance Matrix found
          schema:
            type: array
            items:
              $ref: '#/definitions/ExtendedDistanceMatrix'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: Extended Distance Matrix not found

  /extendedDistanceMatrix/location:
    get:
      tags:
        - Extended Distance Matrix
      summary: 'Get list of Extended Distance Matrix Location'
      description: |
        <i>DESCRIPTION</i>
        IHB search and returns the number or list of matching certain ExtendedDistanceMatrix Location search parameters.        
        <i>FLOW</i> 
        * The TCI with <b>GET /extendedDistanceMatrix/location</b> calls the Service to get the list of ExtendedDistanceMatrix Location of interest
        * The IHB service returns to TCI or the sheer number of list elements or all the elements of the list corresponding to the set parameters
        <i>SPECIFICS AND CONTROLS</i>
        * Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        * At least <code>locationName</code> and <code>locationType</code> are <b>required</b>.
        * If <code>comboLocationRef</code> is specified, only locations from/to <code>comboLocationRef</code>, depending on <code>locationType</code>, are returned.
        * Pagination parameters, <code>pageNumber</code> and <code>pageSize</code>, are <b>required</b>
        * (<code>pageNumber</code> * <code>pageSize</code>) must be less than the maximum value. The maximum allowed value is <b>10000</b>
        * If the <code>pageActionCount</code> is set to "true", the service returns an empty body and the number of elements found that meet the search criteria specified
        * If the <code>pageActionCount</code> is set to "false", or is not present, the service returns in the body the list with the item data,  that meet the search criteria
      operationId: searchExtendedDistanceMatrixLocation
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pageNumber
          in: query
          description: 'Determines the result index to start searching from. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageSize
          in: query
          description: 'Determines the number of elements to return. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageActionCount
          in: query
          description: 'Enabling count mode the service will return, in header X-WTF-PAGING-TOTAL-ELEMENTS, only the number of occurrences with filters applied; the body of the response will be empty'
          required: false
          type: boolean
        - name: locationName
          in: query
          description: 'Location name. It can be used for autocomplete search.'
          required: true
          type: string
        - name: locationType
          in: query
          description: 'Location type. Possible values: ORIGIN, DESTINATION'
          required: true
          type: string
          enum:
            - ORIGIN
            - DESTINATION
        - name: comboLocationRef
          in: query
          description: 'ID of the location associated with the searched one.'
          required: false
          type: string
      responses:
        200:
          headers:
            X-WTF-PAGING-TOTAL-PAGES:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE:
              type: integer
              format: int32
            X-WTF-PAGING-PAGE-SIZE:
              type: integer
              format: int32
            X-WTF-PAGING-TOTAL-ELEMENTS:
              type: integer
              format: int32
          description: Extended Distance Matrix Location found
          schema:
            type: array
            items:
              $ref: '#/definitions/ExtendedDistanceMatrixLocation'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: Extended Distance Matrix Location not found



  /reloadCuts:
    get:
      tags:
        - Electronic Purse
      summary: 'Get list of TopUpAllowableAmounts'
      description: |

        <i>DESCRIPTION</i>
        The service returns the data relating to all reload cuts..

      operationId: getReloadCuts
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pageNumber
          in: query
          description: 'Determines the result index to start searching from. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageSize
          in: query
          description: 'Determines the number of elements to return. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageActionCount
          in: query
          description: 'Enabling count mode the service will return, in header X-WTF-PAGING-TOTAL-ELEMENTS, only the number of occurrences with no filters applied, any query parameters will be ignored, <b>except for "partyAccountId"</b> parameter; the body of the response will be empty'
          required: false
          type: boolean

      responses:
        200:
          description: TopUpAllowableAmounts found
          schema:
            type: array
            items:
              $ref: '#/definitions/TopUpAllowableAmount'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: TopUpAllowableAmounts not found

  /residualTopupAmount/{epurseId}:
    get:
      tags:
        - Electronic Purse
      summary: 'Get a ChargeLimitData'
      description: |

        <i>DESCRIPTION</i>
        The service returns a ChargeLimitData.

      operationId: getResidualTopupAmount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: epurseId
          in: path
          description: Epurse unique identifier
          required: true
          type: string
        - name: validyDate
          in: query
          description: 'Defines the search date for the residual top-up credit.'
          required: false
          type: string
          format: date

      responses:
        200:
          description: ChargeLimitData found
          schema:
            type: array
            items:
              $ref: '#/definitions/ChargeLimitData'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: ChargeLimitData not found


  /epurse:
    get:
      tags:
        - Electronic Purse
      summary: 'Get list of Epurse'
      description: |

        <i>DESCRIPTION</i>
        The service returns the list of Epurse.
      

      operationId: searchEpurse
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pageNumber
          in: query
          description: 'Determines the result index to start searching from. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageSize
          in: query
          description: 'Determines the number of elements to return. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageActionCount
          in: query
          description: 'Enabling count mode the service will return, in header X-WTF-PAGING-TOTAL-ELEMENTS, only the number of occurrences with no filters applied, any query parameters will be ignored, <b>except for "partyAccountId"</b> parameter; the body of the response will be empty'
          required: false
          type: boolean
        - name: ownerId
          in: query
          description: Owner identifier
          required: false
          type: string
        - name: ownerType
          in: query
          description: Owner type
          required: false
          type: string
        - name: status
          in: query
          description: status
          required: false
          type: string

      responses:
        200:
          description: Epurse found
          schema:
            type: array
            items:
              $ref: '#/definitions/Epurse'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: Epurse not found


  /epurse/{epurseId}/transactions:
    get:
      tags:
        - Electronic Purse
      summary: 'Get list of transactions of Epurse'
      description: |

        <i>DESCRIPTION</i>
        The service returns the list of transactions.
      

      operationId: getTransactions
      produces:
        - application/json
      parameters:
        - name: epurseId
          in: path
          description: 'Epurse identifier'
          required: true
          type: string
        - name: pageNumber
          in: query
          description: 'Determines the result index to start searching from. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageSize
          in: query
          description: 'Determines the number of elements to return. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageActionCount
          in: query
          description: 'Enabling count mode the service will return, in header X-WTF-PAGING-TOTAL-ELEMENTS, only the number of occurrences with no filters applied, any query parameters will be ignored, <b>except for "partyAccountId"</b> parameter; the body of the response will be empty'
          required: false
          type: boolean
        - name: transactionType
          in: query
          description: 'Represents the type of transaction. If not valued it returns all types of transactions, otherwise the allowed values TOP-UP / CHARGE.'
          type: string
          x-example: 'TOP-UP'
        - name: fromDate
          in: query
          description: From date
          required: false
          type: string
          format : date
        - name: toDate
          in: query
          description: To date
          required: false
          type: string
          format : date

      responses:
        200:
          description: Transactions found
          schema:
            type: array
            items:
              $ref: '#/definitions/TransactionsApi'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: Epurse not found


  /reseller/info:
    get:
      tags:
        - Electronic Purse
      summary: 'Get the reseller touchpoint id and seller id'
      description: |

        <i>DESCRIPTION</i>
        The service the reseller info.
      

      operationId: getTouchpointReseller
      produces:
        - application/json
      responses:
        200:
          description: Epurse found
          schema:
            $ref: '#/definitions/TouchpointReseller'
        400:
          description: The request was invalid or cannot be otherwise served.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: Touchpoint Reseller not found

  /searchTransactions:
    get:
      tags:
        - Transactions
      summary: "Get all transaction type filtered for input parameters."
      description: |
        <i>DESCRIPTION</i>
        The MMS service searches for all types of transactions based on the input parameters.
        
        <i>SPECIFICS AND CONTROLS</i>
        * Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        * Pagination parameters, <code>pageNumber</code> and <code>pageSize</code>, are <b>required</b>
        * If the <code>transactionId</code> parameter is non-null, <b>all other parameters are ignored</b>. Because if this parameter is passed, the other parameters are not needed to be able to make the query. The <b>transaction is unique</b>.
        * The <code>invoiceExistence</code> parameter can only be set if the <code>transactionType</code> parameter is set to <b>'PRC'</b> (purchase) or <b>'PPC'</b> (prepurchase).
        * The <code>creditNoteExistence</code> parameter can only be set if the <code>transactionType</code> parameter is set to <b>'RFD'</b> (refund).
      operationId: searchTransactions
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pageNumber
          in: query
          description: 'Determines the result index to start searching from. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageSize
          in: query
          description: 'Determines the number of elements to return. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: transactionId
          in: query
          description: "Transaction identifier"
          required: false
          type: string
        - name: transactionType
          in: query
          description: >
            Transaction type. Possible values: 
              * 'PRC' - Purchase 
              * 'PPC' - PrePurchase 
              * 'ISS' - Issuing 
              * 'VLD' - Validation 
              * 'ISP' - Inspection 
              * 'CXL' - Cancel 
              * 'EXP' - Expiry 
              * 'RFD' - Refund 
              * 'CCM' - Change Compensation
              * 'OTH' - Other
          required: false
          type: string
          enum:
            - PRC
            - PPC
            - ISS
            - VLD
            - ISP
            - CXL
            - EXP
            - RFD
            - CCM
            - OTH
        - name: customerId
          in: query
          description: "Customer identifier"
          required: false
          type: string
        - name: ticketId
          in: query
          description: "Ticket identifier"
          required: false
          type: string
        - name: transactionResult
          in: query
          description: >
            Transaction result. Possible values:
              * 'SCS' - Success 
              * 'ERR' - Error 
              * 'WRN' - Error 
              * 'CLD' - Cancelled
          required: false
          default: 'SCS'
          type: string
          enum:
            - SCS
            - ERR
            - WRN
            - CLD
        - name: relatedTransactionsIds
          in: query
          description: 'Related transactions identifiers to find the transactions associated with; it is possible to specify one or more id separated by a comma.'
          required: false
          type: array
          items:
            type: string
        - name: transactionDateTimeStart
          in: query
          description: 'Beginning of the interval in which the transactionDateTime must be contained; Format "YYYY-MM-DD" (ISO 8601).'
          required: true
          type: string
          format: date
          x-example: '2018-10-30'
        - name: transactionDateTimeEnd
          in: query
          description: 'End of the interval in which the transactionDateTime must be contained; Format "YYYY-MM-DD" (ISO 8601).'
          required: true
          type: string
          format: date
          x-example: '2018-10-30'
        - name: invoiceExistence
          in: query
          description: 'Boolean flag - whether the invoice exists in the transaction or not. It can only be set if transactionType is equal to PPC or PRC'
          type: boolean
          required: false
        - name: creditNoteExistence
          in: query
          description: 'Boolean flag - whether the credit note exists in the refund transaction or not. It can only be set if transactionType is equal to RFD'
          type: boolean
          required: false
        - name: touchpointId
          in: query
          description: "Touchpoint identifier"
          required: false
          type: string
        - name: deviceId
          in: query
          description: "Device identifier"
          required: false
          type: string
        - name: workshiftId
          in: query
          description: "Workshift identifier"
          required: false
          type: string
      responses:
        200:
          description: "Transactions found."
          schema:
            type: array
            items:
              $ref: '#/definitions/Transaction'
        400:
          description: "The request was invalid or cannot be otherwise served."
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        404:
          description: "Transactions not found."

  /fineNotification:
    get:
      tags:
        - Fines Management
      summary: "Get all fines filtered for input parameters."
      description: |
        <i>DESCRIPTION</i>
        The MMS service searches for all fines based on the input parameters.
        
        <i>SPECIFICS AND CONTROLS</i>
        * Perform formal checks (e.g. syntactic correctness and presence of mandatory parameters)
        * Pagination parameters, <code>pageNumber</code> and <code>pageSize</code>, are <b>required</b>
        * The other parameters are optional. In the event that no parameter is entered, the service returns all fines.

      operationId: searchFinesNotification
      produces:
        - application/json
      parameters:
        - name: pageNumber
          in: query
          description: 'Determines the result index to start searching from. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageSize
          in: query
          description: 'Determines the number of elements to return. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: fineId
          in: query
          description: 'Fine notification identifier'
          required: false
          type: string
        - name: idTypeOfInfringement
          in: query
          description: 'Type of infringement identifier'
          required: false
          type: string
        - name: idIndividual
          in: query
          description: 'Individual identifier'
          required: false
          type: string
        - name: name
          in: query
          description: 'Individual name'
          required: false
          type: string
        - name: surname
          in: query
          description: 'Individual surname'
          required: false
          type: string
        - name: documentNumber
          in: query
          description: 'Individual document number'
          required: false
          type: string
        - name: fromDate
          in: query
          description: 'Beginning of the interval in which the fine notification date must be contained; Format "YYYY-MM-DD" (ISO 8601).'
          required: false
          type: string
          format: date
          x-example: '2022-01-01'
        - name: toDate
          in: query
          description: 'End of the interval in which the fine notification date must be contained; Format "YYYY-MM-DD" (ISO 8601).'
          required: false
          type: string
          format: date
          x-example: '2022-12-31'
        - name: paymentStatus
          in: query
          description: >
            Payment status. Possible values:
             * PAYED
             * DISPUTE
             * NOTPAYED
             * OTHER
          required: false
          type: string
        - name: workshiftId
          in: query
          description: 'Workshift identifier'
          required: false
          type: string
        - name: ticketInspectorReference
          in: query
          description: 'Ticket Inspector Reference. Could be the registration number'
          required: false
          type: string
      responses:
        '200':
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/FineNotification'
        '404':
          description: Fines not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

    post:
      tags:
        - Fines Management
      summary: "The service insert the data of fine notification."
      description: |
        <i>DESCRIPTION</i>
        The service insert the data of fine notification..
        
        <i>SPECIFICS AND CONTROLS</i>
        * The primary individual is the offender.
        * The secondary individual is the guardian/parent of the offender. To be completed only if the offender is a minor.
        * The typeOfInfringementId parameter must be valid, it must refer to an existing infringement.
        * The fine id should not be sent. It is generated by the service and returned in output
        * The notification status ( statusCode) may not be sent. It is set by the service to 'ISSUED' and returned in output

      operationId: createFineNotification
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/FineInsertInput'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/FineNotification'
        '404':
          description: Fines not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /fineNotification/{fineId}/cancel:
    put:
      tags:
        - Fines Management
      summary: 'Update the status of fine notification to CANCELED.'
      description: |
        <i>DESCRIPTION</i> \
        The service update the status relating to the searched fine notification to CANCELED.
        <i>SPECIFICS AND CONTROLS</i>
        * The fineId input parameter must refer to an existing fine that has not already been paid
      operationId: cancelFineNotification
      produces:
        - application/json
      parameters:
        - name: fineId
          in: path
          description: The unique identifier of fine
          required: true
          type: string
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/FineNotification'
        '404':
          description: Fines not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /typeOfInfringement:
    get:
      tags:
        - Fines Management
      summary: "Get all types of infringements."
      description: |
        <i>DESCRIPTION</i>
        The MMS service returns the details of all types of infringements.
        
        <i>SPECIFICS AND CONTROLS</i>
        * Pagination parameters, <code>pageNumber</code> and <code>pageSize</code>, are <b>required</b>

      operationId: getFineTypeOfInfringement
      produces:
        - application/json
      parameters:
        - name: pageNumber
          in: query
          description: 'Determines the result index to start searching from. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
        - name: pageSize
          in: query
          description: 'Determines the number of elements to return. Minimum allowed value is "1"'
          required: true
          type: integer
          minimum: 1
      responses:
        '200':
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/TypeOfInfringement'
        '404':
          description: Type of infringement not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /infringementCost/{typeOfInfringementId}:
    get:
      tags:
        - Fines Management
      summary: "Get the costs of the indicated infringement"
      description: |
        <i>DESCRIPTION</i>
        The service returns the data relating to the cost of the searched infringement.
        
        <i>SPECIFICS AND CONTROLS</i>
        * The typeOfInfringementId input parameter must refer to an existing type of infringement

      operationId: getFineCostOfInfringement
      produces:
        - application/json
      parameters:
        - name: typeOfInfringementId
          in: path
          description: The unique identifier of fine
          required: true
          type: string
      responses:
        '200':
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/InfringementCost'
        '404':
          description: Cost of infringement not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /fineCost:
    get:
      tags:
        - Fines Management
      summary: "Calculate the cost of fine."
      description: |
        <i>DESCRIPTION</i>
        The service calculates the cost of the fine.
        
        <i>SPECIFICS AND CONTROLS</i>
        * The fineId parameter is mandatory.
        * The paymentDate parameter is optional; if it is not set, it will be set to the system date

      operationId: calculateFineCost
      produces:
        - application/json
      parameters:
        - name: fineId
          in: query
          description: 'Fine unique identifier'
          required: true
          type: string
        - name: paymentDate
          in: query
          description: 'The Payment date.'
          required: false
          type: string
          format: date-time
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/FineCostData'
        '404':
          description: Type of infringement not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /finePayment:
    put:
      tags:
        - Fines Management
      summary: 'Create the transaction of type FINE.'
      description: |
        <i>DESCRIPTION</i> \
        The service create the transaction of the fine.

      operationId: createFinePayment
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/FinePaymentData'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/FinePaymentStatus'
        '404':
          description: Fines not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'


definitions:
  SearchTripInput:
    type: object
    description: |
      For a detailed description of the embedded legData into the trip, please refer to <i>LegDataTransport</i>, <i>LegDataPMob</i>, <i>LegDataShare</i> models, according with the legData type. The \"<code>legDataType</code>\" field of the legData represents the type of the legData to be processed, it can be:
        * <strong>LegDataTransport</strong>\:
          * \"<code>legsData</code>\" <b>must</b> contain a <i>LegDataTransport</i> object with field \"<code>legDataType</code>\" valorized as \"<b>TRMOB</b>\".
        * <strong>LegDataPMob</strong>\:
          * \"<code>legsData</code>\" <b>must</b> contain a <i>LegDataPMob</i> object with field \"<code>legDataType</code>\" valorized as \"<b>PMOB</b>\".
        * <strong>LegDataShare</strong>\:
          * \"<code>legsData</code>\" <b>must</b> contain a <i>LegDataShare</i> object with field \"<code>legDataType</code>\" valorized as \"<b>SHARE</b>\".
    properties:
      tripId:
        type: string
        example: 'abcdef-012345'
        description: 'Identification of a specified trip passed from channels.'
      legsData:
        type: "array"
        items:
          $ref: "#/definitions/LegData"
      profile:
        type: string
        example: 'abcdef-012345'
        description: 'Customer Profile Id - passed from channels.'
      mediaType:
        type: string
        example: 'abcdef-012345'
        description: 'Media type identified - passed from channels.'
      contractType:
        type: string
        example: 'abcdef-012345'
        description: 'Product type - passed from channels.'

  LegData:
    discriminator: "legDataType"
    description: "LegData according to the type of legDataType refers LegDataTransport, LegDataPMob, LegDataShare model"

    type: object
    required:
      - legId
      - legDataType
    properties:
      legDataType:
        $ref: "#/definitions/LegDataEnum"
      legId:
        type: string
        example: 'abcdef-012345'
        description: 'Id Leg.'
      duration:
        type: "string"
        format: "time"
        example: "00:00:00"
        description: 'time of duration leg'
      physicalKm:
        type: number
        format: double
        description: "KM physical."
        example: '0'
      commercialKm:
        type: number
        format: double
        description: "KM commercial."

  LegDataTransport:
    allOf:
      - $ref: "#/definitions/LegData"
      - type: object
        required:
          - transportOperator
          - transportMode
          - origin
          - destination
          - line
        properties:
          transportOperator:
            type: string
            example: 'abcdef-012345'
            description: 'Identifies the transport operator.'
          line:
            $ref: "#/definitions/GenericInfoData"
          route:
            $ref: "#/definitions/GenericInfoData"
          journey:
            $ref: "#/definitions/GenericInfoData"
          zone:
            $ref: "#/definitions/GenericInfoData"
          transportMode:
            type: string
            example: 'abcdef-012345'
            description: 'Identifies the Transport Mode.'
          origin:
            type: string
            example: 'abcdef-012345'
            description: 'Origin code.'
          originDt:
            type: "string"
            format: "date"
            example: "2018-04-02T00:00:00Z"
            description: 'Date time of origin code.'
          destination:
            type: string
            example: 'abcdef-012345'
            description: 'Destination code.'
          destinationDt:
            type: "string"
            format: "date"
            example: "2018-04-02T00:00:00Z"
            description: 'Date time of destination code.'
  LegDataPMob:
    allOf:
      - $ref: "#/definitions/LegData"
      - type: object
        properties:
          route:
            $ref: "#/definitions/GenericInfoData"
          journey:
            $ref: "#/definitions/GenericInfoData"
          zone:
            $ref: "#/definitions/GenericInfoData"
          origin:
            type: string
            example: 'abcdef-012345'
            description: 'Origin code.'
          originDt:
            type: "string"
            format: "date"
            example: "2018-04-02T00:00:00Z"
            description: 'Date time of origin code.'
          destination:
            type: string
            example: 'abcdef-012345'
            description: 'Destination code.'
          destinationDt:
            type: "string"
            format: "date"
            example: "2018-04-02T00:00:00Z"
            description: 'Date time of destination code.'
  LegDataShare:
    allOf:
      - $ref: "#/definitions/LegData"
      - type: object
        required:
          - transportMode
          - origin
          - destination
        properties:
          transportOperator:
            type: string
            example: 'abcdef-012345'
            description: 'Identifies the transport operator.'
          line:
            $ref: "#/definitions/GenericInfoData"

          zone:
            $ref: "#/definitions/GenericInfoData"
          transportMode:
            type: string
            example: 'abcdef-012345'
            description: 'Identifies the Transport Mode.'
          origin:
            type: string
            example: 'abcdef-012345'
            description: 'Origin code.'
          originDt:
            type: "string"
            format: "date"
            example: "2018-04-02T00:00:00Z"
            description: 'Date time of origin code.'
          destination:
            type: string
            example: 'abcdef-012345'
            description: 'Destination code.'
          destinationDt:
            type: "string"
            format: "date"
            example: "2018-04-02T00:00:00Z"
            description: 'Date time of destination code.'

  GenericInfoData:
    type: object
    properties:
      id:
        type: string
        example: 'abcdef-012345'
        description: 'Id.'
        format: "uuid"
      description:
        type: string
        example: 'abcdef-012345'
        description: 'Description.'

  CardDataModel:
    type: object
    properties:
      cardDataModelId:
        type: string
        example: ABCDEF0123456
        description: Card data model unique identifier
      encodingType:
        type: string
        example: base64
        description: Encoding scheme
        enum:
          - BASE64
      encodedCardDataModel:
        type: string
        example: ewogICJIQ0VDYXJkRGF0YU1vZGVsIjogewogICAgIm1DYXJkRmlsZVN5c3RlbSI6IHsKCiAgICAgICJjYXJkRmlsZUluZm8iOiBbCiAgICAgICAgewogICAgICAgICAgIkZpbGVUeXBlIjogIjEiLAogICAgICAgICAgIkZpbGVOYW1lIjogIkVudmlyb25tZW50IiwKICAgICAgICAgICJQYXJlbnRMaWQiOiAiMjEwMCIsCiAgICAgICAgICAiTGlkIjogIjIxMDEiLAogICAgICAgICAgIlNpZCI6ICI3IiwKICAgICAgICAgICJOdW1SZWMiOiAiMSIsCiAgICAgICAgICAiU2l6ZVJlYyI6ICIyOSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJGaWxlVHlwZSI6ICIxIiwKICAgICAgICAgICJGaWxlTmFtZSI6ICJDb250cmFjdHMiLAogICAgICAgICAgIlBhcmVudExpZCI6ICIyMTAwIiwKICAgICAgICAgICJMaWQiOiAiMjEyMCIsdQogICAgICAgICAgIlNpZCI6ICI5IiwKICAgICAgICAgICJOdW1SZWMiOiAiOCIsCiAgICAgICAgICAiU2l6ZVJlYyI6ICI0OCIKICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICAidG9rZW5pemF0aW9uUnVsZXMiOiB7CiAgICAgICJ0aWNrZXQiOiB7CiAgICAgICAgIi10eXBlIjogIm1vbnRobHkiLAogICAgICAgICItZmllbGROYW1lIjogImNhdGVnb3JpYSIsCiAgICAgICAgIi10b2tlblZhbHVlIjogImRhaWx5IiwKICAgICAgICAiLXRva2VuRHVyYXRpb24iOiAiZGFpbHkiLAogICAgICAgICJzaWduYXR1cmUiOiB7CiAgICAgICAgICAidHJhY2UiOiB7CiAgICAgICAgICAgICJTYW1TdGFydCI6ICIxMjgiLAogICAgICAgICAgICAiU2FtTGVuZ3RoIjogIjMyIiwKICAgICAgICAgICAgIkNvdW50ZXJTdGFydCI6ICIxNjAiLAogICAgICAgICAgICAiQ291bnRlckVuZCI6ICIyNCIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K
        description: 'JSON formatted card data model, Base64 encoded'
  Error:
    type: object
    properties:
      code:
        type: string
        description: The error code
        example: '400'
      message:
        type: string
        description: The error message
        example: Error message
      details:
        type: string
        description: Optional details about the error
        example: Error cause or description
    required:
      - code
      - message
  DeviceData:
    type: object
    required:
      - userId
      - deviceCodeExt
    properties:
      deviceId:
        type: string
        format: uuid
        example: 73f754ec-6942-4b46-8ede-ba1f906bafed
        description: Device unique identifier
      deviceCodeExt:
        type: string
        example: B45DDE22A-356938035643809-mario.rossi
        description: External device identifier. E.g. HCEDeviceId (IMEI-appId-userId).
      userId:
        type: string
        format: uuid
        example: c4d07c61-a0f0-4726-a84e-b4fa60360786
        description: User unique identifier
      registrationDate:
        type: string
        format: date-time
        example: '2017-11-27T17:32:28Z'
        description: Registration date and time
      blacklistDate:
        type: string
        format: date-time
        example: '2017-11-27T17:32:28Z'
        description: Registration date and time
      model:
        type: string
        description: 'Device model'
        example: 'Huawei P10'
      status:
        type: string
        description: 'Device status'
        example: ACTIVE
        enum:
          - ACTIVE
          - INACTIVE
      deviceType:
        type: string
        description: 'Device type'
        example: 'MOBILE_DEVICE'
  HCEDeviceBlackList:
    type: object
    properties:
      deviceCodeExt:
        type: string
        example: B45DDE22A-356938035643809-mario.rossi
        description: External device identifier. E.g. HCEDeviceId (IMEI-appId-userId).
      inBlackListSince:
        type: string
        format: date-time
        example: '2018-01-10T13:56:38Z'
        description: Date and time when the device was put in the blacklist
      model:
        type: string
        example: Samsung Galaxy S8
        description: Device model
      registrationDate:
        type: string
        format: date-time
        example: '2017-11-27T17:32:28Z'
        description: Registration date and time

  TicketListData:
    type: object
    required:
      - ticketId
      - mediaId
    properties:
      ticketId:
        type: string
        example: '1e00feec-d219-4a52-8dae-efb8ed4324ac'
        description: 'Ticket unique identifier'
      mediaId:
        type: string
        example: '410821d7-7720-4d09-8987-faa104930bd2'
        description: 'Media unique identifier'
      touchPointId:
        type: string
        example: '410821d7-7720-4d09-8987-faa104930bd2'
        description: 'Touchpoint unique identifier'
      deviceId:
        type: string
        example: '410821d7-7720-4d09-8987-faa104930bd2'
        description: 'Device unique identifier'
      notes:
        type: string
        description: 'Notes about the event'
      eventDateTime:
        type: string
        example: '2015-09-26T07:30:00.000'
        format: date-time
      codInsertionType:
        type: string
        example: WL
        enum: [ WL, BL ]
        description: 'Defines the list type: Whitelist or Blacklist'
  EventData:
    type: object
    required:
      - eventDate
    properties:
      eventType:
        type: string
        example: TKTBASED
        enum: [ TKTBASED, ACCBASED ]
        description: 'Defines the event type. If it is sent as "TKTBASED", ticketId must be valorized.'
        default: TKTBASED
      ticketId:
        type: string
        example: '123456'
        description: 'Ticket unique identifier'
      mediaId:
        type: string
        example: 'A34F52BEAA123C'
        description: 'Media unique identifier'
      hceDeviceId:
        type: string
        example: 'B45DDE22A-356938035643809-10001'
        description: 'HCE Device unique identifier'
      mediaExtCode:
        type: string
        example: 'External_Media_Identifier'
        description: 'External Device identifier'
      partyAccountId:
        type: string
        example: '356938035643809'
        description: 'Party account (customer) unique identifier'
      sessionId:
        type: string
        example: 'TDzNHVmE%2ChY5'
        description: 'Optional identifier of the session to which the event belongs'
      eventExtCode:
        type: string
        example: '4d66e758-b6c3-11ea-b3de-0242ac130004'
        description: 'External identifier of the event'
      eventDate:
        type: string
        format: date-time
        example: '2017-11-27T17:32:28Z'
        description: 'Date of event'
      eventOutcome:
        type: string
        example: SUCCESS
        enum: [ SUCCESS, ERROR ]
        description: 'Defines the event outcome. If it is sent as "ERROR" the system will only record the event without applying any business logic.'
        default: SUCCESS
      note:
        type: string
        example: 'note'
        description: 'Optional notes of the event. It can be used to describe an "ERROR" outcome.'
      infrastructureList:
        type: "array"
        items:
          $ref: "#/definitions/InfrastructureElement"
    description: 'At least one of the parameters "mediaId", "hceDeviceId" and "mediaExtCode" must be specified'
  IssuanceNotification:
    type: object
    required:
      - eventData
    properties:
      eventData:
        $ref: '#/definitions/EventData'

  ProofOfPurchase:
    type: object
    properties:
      ticketId:
        type: string
        example: 'e7aba18e-619d-4db8-8f7c-89ce80bf3738'
        description: Ticket unique identifier
      purchaseDate:
        type: string
        format: date-time
        example: '2017-11-27T17:32:28Z'
        description: Date and time of the purchase
      transactionId:
        type: string
        example: '50384204720330'
        description: Transaction unique identifier
      cardDataModelId:
        type: string
        example: '1'
        description: Card Data Model unique identifier
      tokenInfo:
        $ref: '#/definitions/TokenInfo'

  PurchaseCart:
    type: object
    required:
      - totalAmount
      - ccy
      - paymentType
      - purchaseDate
      - infrastructureList
      - items
      - sellerId
    properties:
      totalAmount:
        type: number
        format: decimal
        description: 'The total amount of the purchase. It must match with product price minus promotion discount if applied, multiplicated by the quantity.'
        example: '12.5'
      ccy:
        type: string
        description: 'Code currency ISO 4217.'
        example: 'EUR'
      paymentType:
        $ref: '#/definitions/PaymentTypeEnum'
      codGateway:
        $ref: '#/definitions/PaymentGatewayType'
      purchaseDate:
        type: string
        format: date-time
        description: 'Date of purchase.'
        example: '2017-11-28T17:32:28Z'
      purchaseOutcome:
        type: string
        example: SUCCESS
        enum: [ SUCCESS, ERROR ]
        description: 'Defines the purchase outcome. If it is sent as "ERROR" the system will only record the transaction without applying any business logic.'
        default: SUCCESS
      note:
        type: string
        example: 'note'
        description: 'Optional notes of the purchase. It can be used to describe an "ERROR" outcome.'
      externalTransactionCode:
        type: string
        description: 'External code of the transaction.'
        example: 'A17363491'
      invoiceCode:
        type: string
        description: 'Invoice code.'
        example: '87878456'
      userId:
        type: string
        description: 'User unique identifier.'
        example: '12345'
      sellerId:
        type: string
        description: 'Seller unique identifier.'
        example: '5ac6a4a2-8b8b-44c7-9ab5'
      items:
        type: array
        items:
          $ref: '#/definitions/PurchaseData'
      infrastructureList:
        type: "array"
        items:
          $ref: "#/definitions/InfrastructureElement"
      workShiftId:
        type: string
        description: 'Workshift unique identifier.'
        example: '5ac6a4a2-8b8b-44c7-9ab5'
      cashAmountEntered:
        type: number
        format: float
        description: 'The total amount entered for the payment of the purchase.'
        example: '10.2'
      changeValue:
        type: number
        format: float
        description: 'The rest disbursed by the payment of the purchase.'
        example: '0.6'
      payoutChange:
        type: number
        format: decimal
        description: 'The rest disbursed by the payment of the purchase.'
        example: '12.5'
      missingPayoutChange:
        type: number
        format: decimal
        description: 'Missing payout change.'
        example: '12.5'
      extraData:
        type: string
        description: ExtraData (available for external systems like MaaS)

  PurchaseData:
    type: object
    required:
      - itemType
      - itemId
      - itemVersion
      - mediaType
    properties:
      itemType:
        type: string
        description: 'Describes the type of item to purchase.'
        enum: [ PRODUCT, SALESPACKAGE ]
        example: PRODUCT
      itemId:
        type: string
        format: uuid
        description: 'Product or SalesPackage unique identifier.'
        example: '93c80f89-dd00-4a06-bd7e-5ba1a970cc4c'
      itemVersion:
        type: integer
        description: 'Product or SalesPackage version.'
        example: 1
      fareTableCellId:
        type: string
        description: 'Identifier of a Cell of Fare Table of a Product, represent a price given by a combination of fare elements.'
      promotionId:
        type: string
        description: 'Identifier of the promotion applied to the purchase.'
        example: 'xxxxxx'
      quantity:
        type: integer
        description: 'Quantity of product to purchase.'
        example: 1
        default: 1
      mediaId:
        type: string
        description: 'Media unique identifier.'
        example: '654321'
      mediaType:
        type: string
        description: >
          Media Type Code.
          Possible values:
            * HCE: Host Card Emulation
            * SC: Smart Card
            * PPR: Paper
            * PPRS: Pre Printed
            * MOB: Mobile
            * VT: Virtual Ticket
            * CP: Chip on Paper
            * EMV: EMV
            * CIE: Carta Identità Elettronica
            * CNS: Carta Nazionale Servizi
        enum: [ HCE, SC, PPR, PPRS, MOB, VT, CP, EMV, CIE, CNS ]
        example: HCE
      startValidity:
        type: string
        format: date-time
        description: 'Start date of ticket validity.'
        example: '2017-11-27T17:32:28Z'
      endValidity:
        type: string
        format: date-time
        description: 'End date of ticket validity.'
        example: '2017-11-28T17:32:28Z'
      geographicalIntervalLimit:
        description: 'Array of GeographicalIntervalLimit.'
        type: array
        items:
          $ref: "#/definitions/GeographicalIntervalLimit"
      extraData:
        type: string
        description: ExtraData (available for external systems like MaaS)
  EpursePurchaseCart:
    type: object
    required:
      - totalAmount
      - ccy
      - ownerType
      - paymentType
      - purchaseDate
      - infrastructureList
      - items
    properties:
      totalAmount:
        type: number
        format: decimal
        description: 'The total amount of the top-up e-epurse purchase. It must match with the sum given by the denominations (items)'
        example: '12.5'
      ccy:
        type: string
        description: 'Code currency ISO 4217.'
        example: 'EUR'
      paymentType:
        $ref: '#/definitions/PaymentTypeEnum'
      codGateway:
        $ref: '#/definitions/PaymentGatewayType'
      purchaseDate:
        type: string
        format: date-time
        description: 'Date of purchase.'
        example: '2017-11-28T17:32:28Z'
      purchaseOutcome:
        type: string
        example: SUCCESS
        enum: [ SUCCESS, ERROR ]
        description: 'Defines the purchase outcome. If it is sent as "ERROR" the system will only record the transaction without applying any business logic.'
        default: SUCCESS
      note:
        type: string
        example: 'note'
        description: 'Optional notes of the purchase. It can be used to describe an "ERROR" outcome.'
      invoiceCode:
        type: string
        description: 'Invoice code.'
        example: '87878456'
      workshiftId:
        type: string
        format: uuid
        description: 'WorkShift unique identifier.'
        example: '967452e0-073f-11e8-909f-41edf697fe1e'
      ownerType:
        type: string
        description: 'Owner Type: RESELLER or CUSTOMER'
        example: 'CUSTOMER'
      items:
        type: array
        items:
          $ref: '#/definitions/TopupEpursePurchaseData'
      infrastructureList:
        type: "array"
        items:
          $ref: "#/definitions/InfrastructureElement"
      numCreditAmount:
        type: number
        format: decimal
        example: '0.6'
      numDiscountAmount:
        type: number
        format: decimal
        example: '0.6'
      numDiscountPerc:
        type: number
        format: decimal
        example: '0.6'
      creditNotes:
        type: string
        example: 'note'
      discountNotes:
        type: string
        example: 'note'
      channel:
        type: string
        example: 'B2C'
        description: 'Channel that is calling the service. Allowable values are B2C and B2B'
  TopupEpursePurchaseData:
    type: object
    required:
      - topUpAmount
    properties:
      topUpAmount:
        type: number
        format: decimal
        description: 'The amount of the item'
        example: '12.5'
      quantity:
        type: integer
        default: 1
        example: 1

  RefundData:
    type: object
    required:
      - purchaseTransactionId
      - ticketIdList
      - refundPaymentMethod
    properties:
      purchaseTransactionId:
        type: string
        format: uuid
        description: 'The purchase transaction id associated with the refund.'
        example: '93c80f89-dd00-4a06-bd7e-5ba1a970cc4c'
      ticketIdList:
        description: 'The list of the ticket associated with the refund.'
        type: array
        items:
          type: string
      refundPaymentMethod:
        $ref: '#/definitions/PaymentTypeEnum'
      debitNote:
        type: string
        description: 'The id of the credit note.'
        example: 'xxxxxx'
      workShiftId:
        type: string
        description: 'Workshift unique identifier.'
        example: '5ac6a4a2-8b8b-44c7-9ab5'

  ChangeCompensationData:
    type: object
    required:
      - purchaseTransactionId
      - amount
      - workShiftId
    properties:
      purchaseTransactionId:
        type: string
        format: uuid
        description: 'The purchase transaction id associated with the CCM.'
        example: '93c80f89-dd00-4a06-bd7e-5ba1a970cc4c'
      amount:
        description: 'The amount of Change Compensation transaction'
        type: number
        format: decimal
        example: '12.5'
      workShiftId:
        type: string
        description: 'Workshift unique identifier.'
        example: '5ac6a4a2-8b8b-44c7-9ab5'

  TokenInfo:
    type: object
    properties:
      activationRequired:
        type: boolean
        example: false
        description: 'True if the ticket needs to be activated with tokenization (e.g. low price tickets, like single ride ones, do not need activation)'
      availableFrom:
        type: string
        format: date-time
        example: '2017-11-27T17:32:28Z'
        description: Token can be created since this date and time
      consumableSince:
        type: integer
        format: int32
        example: 1
        description: 'Number of days, after token creation, the user must wait for before he can validate the token'
        minimum: 0

  ValidationData:
    type: object
    required:
      - codeValidationEvent
    properties:
      codeValidationEvent:
        type: string
        example: 'CHECKIN'
        enum: [ CHECKIN, CHECKOUT ]
        description: Code of validation event as CHECKIN or CHECKOUT
      serviceType:
        type: string
        example: TRANSPORTATION
        enum: [ TRANSPORTATION ]
        description: Defines the service type
        default: TRANSPORTATION
      serviceMode:
        type: string
        example: 'BUS'
        description: Type of the provided service
      serviceProvider:
        type: string
        example: 'MOOVA_TPL'
        description: The organization that provides the service
  ValidationNotification:
    type: object
    required:
      - eventData
      - validationData
    properties:
      eventData:
        $ref: '#/definitions/EventData'
      validationData:
        $ref: '#/definitions/ValidationData'
      travelSummary:
        $ref: '#/definitions/TravelSummary'
  ValidationResponse:
    type: object
    properties:
      successes:
        type: array
        items:
          $ref: '#/definitions/ValidationResult'
      errors:
        type: array
        items:
          $ref: '#/definitions/ValidationResult'
    title: ValidationResponse
  ValidationResult:
    title: ValidationResult
    type: object
    properties:
      ticketId:
        type: string
        example: '7480076b-dd31-4d51-873e-ab80d702313f'
        description: Ticket unique identifier
      sessionId:
        type: string
        example: 'TDzNHVmE%2ChY5'
        description: Optional identifier of the session to which the event belongs.
      eventDate:
        type: string
        format: date-time
        example: '2017-11-27T17:32:28Z'
        description: Date time of error
      errors:
        type: array
        items:
          $ref: '#/definitions/Error'
  InspectionData:
    type: object
    required:
      - inspectorId
    properties:
      inspectorId:
        type: string
        example: 'XYZ-123-AAA'
        description: Inspector unique identifier
  InspectionNotification:
    type: object
    required:
      - eventData
      - inspectionData
    properties:
      eventData:
        $ref: '#/definitions/EventData'
      inspectionData:
        $ref: '#/definitions/InspectionData'
  TransactionId:
    type: object
    properties:
      transactionId:
        type: string
        format: uuid
        description: Transaction unique identifier
        example: '967452e0-073f-11e8-909f-41edf697fe1e'
  TransactionRefund:
    type: object
    required:
      - transactionId
      - purchaseTransactionId
      - refundPaymentMethod
      - ccy
      - totalAmountRefund
      - seller
      - refundItems
    properties:
      transactionId:
        type: string
        format: uuid
        description: 'The refund transaction id.'
        example: '93c80f89-dd00-4a06-bd7e-5ba1a970cc4c'
      purchaseTransactionId:
        type: string
        format: uuid
        description: 'The purchase transaction id associated with the refund.'
        example: '93c80f89-dd00-4a06-bd7e-5ba1a970cc4c'
      refundPaymentMethod:
        $ref: '#/definitions/PaymentTypeEnum'
      ccy:
        type: string
        description: 'Code currency ISO 4217.'
        example: 'EUR'
      totalAmountRefund:
        type: number
        description: 'The total amount of the refund.'
        example: '12.5'
      debitNote:
        type: string
        description: 'The id of the debit note.'
        example: 'xxxxxx'
      seller:
        $ref: "#/definitions/OrganisationRef"
      refundItems:
        description: 'The list of the ticket associated with the refund.'
        type: array
        items:
          $ref: "#/definitions/RefundItem"
  RefundItem:
    type: object
    properties:
      purchasedItemId:
        type: string
        format: uuid
        description: Item id
        example: '967452e0-073f-11e8-909f-41edf697fe1e'
      fareProductData:
        $ref: '#/definitions/TicketProductData'
      salesPackageData:
        $ref: '#/definitions/TicketSalesPackageData'
      refundAmount:
        type: number
        description: 'The total amount of the refund.'
        example: '12.5'
      originalAmount:
        type: number
        description: 'The original total amount of the purchase.'
        example: '12.5'
      itemType:
        type: "string"
        description: 'Describes the type of item'
      ticketId:
        type: string
        format: uuid
        description: Ticket id
        example: '967452e0-073f-11e8-909f-41edf697fe1e'
      quantity:
        type: integer
        example: 2
  TransactionChangeCompensation:
    allOf:
      - $ref: '#/definitions/Transaction'
    type: object
    properties:
      paymentType:
        $ref: '#/definitions/PaymentTypeEnum'
      ccy:
        type: string
        description: 'Code currency ISO 4217.'
        example: 'EUR'
      amount:
        type: number
        format: decimal
        description: 'The amount of the change compensation.'
        example: '12.5'
  PurchaseRef:
    type: object
    properties:
      purchaseRef:
        type: string
        format: uuid
        description: Ref to the initialized purchase
        example: '967452e0-073f-11e8-909f-41edf697fe1e'
      urlPaymentGateway:
        type: string
        description: URL to the Payment Gateway selected
  DateRange:
    type: object
    properties:
      from:
        type: string
        format: date-time
        example: '2018-03-20T00:00:00Z'
      to:
        type: string
        format: date-time
        example: '2018-03-20T23:59:59Z'

  LightTransaction:
    type: object
    properties:
      id:
        type: string
        format: uuid
        description: 'Transaction unique identifier'
        example: '967452e0-073f-11e8-909f-41edf697fe1e'
      date:
        type: string
        format: date-time
        example: '2018-11-07T17:32:28Z'
        description: 'Transaction date'
      type:
        type: string
        example: 'VLD'
        description: 'Transaction type (e.g. "ISS" for issuing, "VLD" for validation, "PRC" for purchase)'
      status:
        type: string
        example: 'ERR'
        description: ' Transaction status (for example "SCS" for Success or "ERR" for Error)'
      infrastructureElements:
        type: array
        description: This list contains infrastructure elements as touchpoint, device, stop point or line.
        items:
          $ref: '#/definitions/InfrastructureElement'

  TicketData:
    type: object
    properties:
      ticketId:
        type: string
        format: uuid
        example: '2bb303b7-ea78-485e-bf85-953fe6c65928'
        description: 'Ticket unique identifier.'
      startValidity:
        type: string
        format: date-time
        example: '2018-11-07T17:32:28Z'
        description: 'Ticket validity start date.'
      endValidity:
        type: string
        format: date-time
        example: '2018-11-07T19:02:28Z'
        description: 'Ticket validity end date.'
      dueDate:
        type: string
        format: date-time
        description: 'Due date of ticket.'
        example: '2017-12-28T17:32:28Z'
      statusCode:
        type: "string"
        example: "ACT"
        description: "Ticket status code (e.g. PND, ACT, VLD, USD, EXP, CND)."
      issued:
        type: "boolean"
        example: true
        description: "Show whether the ticket has been materialized or not."
      product:
        $ref: '#/definitions/TicketProductData'
      salesPackage:
        $ref: '#/definitions/TicketSalesPackageData'
      userId:
        type: string
        description: 'User unique identifier.'
        example: 'UniqueUserId'
      price:
        type: number
        format: float
        description: 'Ticket Value.'
        example: '12.5'
      ccyPrice:
        type: string
        description: 'Code currency ISO 4217.'
        example: 'EUR'
      transactions:
        type: array
        items:
          $ref: '#/definitions/LightTransaction'
      mediaId:
        type: string
        description: 'Media unique identifier.'
        example: '54556edc-9707-4c18-a726-7f974d79b992'
      mediaType:
        type: string
        description: >
          Media Type Code.
          Possible values:
            * HCE: Host Card Emulation
            * SC: Smart Card
            * PPR: Paper
            * PPRS: Pre Printed
            * MOB: Mobile
            * VT: Virtual Ticket
            * CP: Chip on Paper
            * EMV: EMV
            * CIE: Carta Identità Elettronica
            * CNS: Carta Nazionale Servizi
        enum: [ HCE, SC, PPR, PPRS, MOB, VT, CP, EMV, CIE, CNS ]
        example: HCE
      cardDataModelId:
        type: string
        example: '1'
        description: 'Card Data Model unique identifier.'
      cardData:
        type: string
        description: 'Detail of Card Data Model. Format JSON.'
        example: '{"companyId":1,"formatId":1,"extraProductId":0,"samSerialNumber":0,"samCounter":0,"validityDays":255,"weightZonesSum":1,"codeFrom":0,"codeTo":0,"expansionType":0,"numExpansionRange":0}'
      validityPeriod:
        $ref: '#/definitions/ValidityPeriod'
      statusDate:
        type: string
        description: "Indicates the last time and date where the status of the ticket changed"
        format: date-time
        example: '2018-11-07T17:32:28Z'
      usageResiduals:
        $ref: '#/definitions/UsageResiduals'
  UsageResiduals:
    type: object
    description: "Object that contains information regarding remaining uses of a given PURCHASED or VALIDATED ticket"
    properties:
      rides:
        type: integer
        description: "Indicates remaining number of rides in the ticket if applicable, else null"
        example: 29
      minutes:
        type: integer
        description: "Indicates the remaining number of minutes in the ticket if applicable, else null"
        example: 64
      exceedingMinutes:
        type: integer
        description: "Indicates the number of minutes of use exceeding those permitted by the ticket"
        example: 12
      distance:
        type: string
        description: "Indicates the distance that can be travelled using a given ticket"
        example: "25.0"
      exceedingDistance:
        type: string
        description: "Indicates the distance of use exceeding those permitted by the ticket"
        example: "15.23"
      lastRideExpiration:
        type: string
        description: "Indicates the expiration time and date of the last ride validated with a given ticket"
        format: date-time
        example: '2018-11-07T17:32:28Z'
      services:
        type: array
        description: "This list contains all ticket services and it's residual usage information"
        items:
          $ref: '#/definitions/ServiceResidual'
  ServiceResidual:
    type: object
    description: "Contains basic service information (ID, name and mode) and remaining usages"
    properties:
      serviceId:
        type: string
        description: "Service Identifier"
      serviceName:
        type: string
        description: "Service Name"
      ServiceMode:
        type: string
        description: "Service Transport Mode"
      usages:
        type: integer
        description: "Indicates remaining number of usages in the specific service"
        example: 32
  TicketProductData:
    type: object
    properties:
      productId:
        type: string
        format: uuid
        description: 'Product unique identifier'
        example: '54556edc-9707-4c18-a726-7f974d79b992'
      productVersion:
        type: string
        description: 'Version of the Product.'
        example: '1'
      productDescription:
        type: string
        description: 'Product description.'
        example: 'Biglietto Integrato a Tempo'
      productTypeCode:
        type: string
        example: 'SINGLE_RIDE'
        description: 'Product type.'
      extCodProduct:
        type: "string"
        description: 'Product external code.'
        example: "61"
      priceRef:
        $ref: '#/definitions/TicketPriceReference'
      promotion:
        $ref: '#/definitions/PromotionRef'
      services:
        type: array
        items:
          $ref: '#/definitions/ServiceRef'
      geographicalIntervalLimit:
        type: array
        items:
          $ref: '#/definitions/GeographicalIntervalLimit'
  TicketSalesPackageData:
    type: object
    properties:
      salesPackageId:
        type: string
        description: 'Sales package identifier'
      salesPackageDescription:
        type: string
        description: 'Sales package description'
      salesPackageCcy:
        type: string
        example: 'EUR'
        description: 'Code currency ISO 4217'
      salesPackagePrice:
        type: number
        format: float
        description: 'Sales package price'
        example: '12.5'
  TicketPriceReference:
    type: object
    properties:
      fareTableCellId:
        type: string
        description: 'Identifier of a Cell of Fare Table of a Product, represent a price given by a combination of fare elements.'
        example: 'A1'
      fareTableCellName:
        type: string
        description: 'Name of a Cell of Fare Table of a Product.'
        example: 'Price combination A1'
      serviceId:
        type: string
        description: 'Identifier of Service.'
        example: 'SR.TM.UBRAIL'
      serviceName:
        type: string
        description: 'Service Name.'
        example: 'Urban Railway'
      serviceOrganisationRef:
        type: string
        description: 'Reference to the Organization Providing the service.'
        example: 'ATM'
      fareZoneId:
        type: string
        description: 'Identifier of Network Element.'
        example: 'NT.TF.HZ16'
      fareZoneName:
        type: string
        description: 'Network Element Name.'
        example: 'Half Zone 4'
      validityPeriodId:
        type: string
        description: 'Identifier of Usage Validity Period.'
        example: '2c8b317e-a462-11e8-af67-37c61bc0a4a7'
      validityPeriodName:
        type: string
        description: 'Name of Usage Validity Period.'
        example: '90 Minutes'
      temporalValidityId:
        type: string
        description: 'Identifier of Temporal Validity Parameter.'
        example: '7aa3f4e5-af80-11e8-bbfb-590368d44d7d'
      temporalValidityName:
        type: string
        description: 'Name of Temporal Validity Parameter.'
        example: 'temporal 29 august'
      customerProfileId:
        type: string
        description: 'Identifier of Customer PROFILE.'
        example: 'CP.SPN'
      customerProfileName:
        type: string
        description: 'Name of Customer PROFILE.'
        example: 'Special needs'
      geographicalId:
        type: string
        description: 'Identifier of GEOGRAPHICAL INTERVAL.'
        example: 'D.0.50'
      geographicalName:
        type: string
        description: 'Name of GEOGRAPHICAL INTERVAL.'
        example: 'From 0 to 100'
      distanceMatrixElementId:
        type: string
        description: 'Identifier of a DISTANCE MATRIX ELEMENT.'
        example: 'xxxx2'
      distanceMatrixElementName:
        type: string
        description: 'Name of a DISTANCE MATRIX ELEMENT.'
        example: 'BtoC'
      mediaType:
        type: string
        description: 'Media Type Code. Chosen from [HCE, EMV, SC, PPR, PPRS, MOB, VT, CP, CIE, CNS]'
        example: 'HCE'
      mediaDescriptionType:
        type: string
        description: 'Media Type Description'
        example: 'HCE'
      distributionTouchpointId:
        type: string
        description: 'Identifier of a DISTRIBUTION TOUCHPOINT/CHANNEL.'
        example: '317d58cd-af76-11e8-8e23-d7566f1d5818'
      distributionTouchpointName:
        type: string
        description: 'Short Name of DISTRIBUTION TOUCHPOINT/CHANNEL.'
        example: 'TVM Milan'
      distributionTouchpointType:
        type: string
        description: 'Code type of distribution touchpoint.'
        example: 'TVM'

  PaymentTypeEnum:
    type: string
    description: "Reference to a Payment Type"
    enum: [ CASH, CARD, EPURSE, COUPON, RID, ACCOUNT_BASED ]

  PaymentGatewayType:
    type: string
    description: "Reference to a Payment Gateway."
    enum: [ PAGOPA, NEXI ]

  InfrastructureElement:
    type: object
    required:
      - id
      - type
    properties:
      id:
        type: string
        description: 'Infrastructure identifier'
        example: 'Infrastructure_Identifier'
      type:
        type: string
        example: TOUCHPOINT
        enum: [ DEVICE, TOUCHPOINT, STOPPOINT, LINE, ZONE ]
        description: 'Infrastructure type'
      code:
        type: string
        example: 'TNPNTS00000000000001'
        description: 'Internal code identifier'
      publicCode:
        type: string
        example: 'LINE12A'
        description: 'Public code identifier'
      codeZone:
        type: string
        example: 'COD_073f-11e8'
        description: 'Zone code identifier'
      location:
        $ref: '#/definitions/Location'

  Location:
    type: object
    required:
      - latitude
      - longitude
    description: Point Projection to use for stop point.
    properties:
      latitude:
        type: number
        description: >-
          Latitude from equator. -90° (South) to +90° (North).  Decimal degrees.
          e.g. 56.356.
      longitude:
        type: number
        description: >-
          Longitude from Greenwich Meridian. -180° (East) to +180° (West).
          Decimal degrees. e.g. 2.356.
      precision:
        type: number
        description: Precision for point measurement. In meters.


  Product:
    type: object
    required:
      - productId
    description: "An immaterial marketable element (access rights, discount rights etc), specific to a CHARGING MOMENT. The set of access rights granted by a travel document represent a FARE PRODUCT"
    properties:
      productId:
        type: string
        example: '16e47f89-b017-11e8-8a96-a79e969e4d55'
        description: "Identifier of FARE PRODUCT."
      productVersion:
        type: integer
        example: 1
        description: "Version of FARE PRODUCT."
      productName:
        type: string
        example: 'Season Ticket September'
        description: "FARE PRODUCT name."
      productType:
        type: string
        example: '1'
        description: "Product Type. PRE-ASSIGNED FARE PRODUCT (single ticket, monthly); AMOUNT OF PRICE UNIT( value cards or electronic purses, which are debited for each transaction)"
      productTypeDesc:
        type: string
        example: 'single ticket'
        description: "Product Type description"
      productStartValidity:
        type: string
        format: date
        example: '2018-09-04'
        description: "Identify the start validity  date of the product. ISO8601"
      productEndValidity:
        type: string
        format: date
        example: '2018-09-04'
        description: "Identify the end validity  date of the product. ISO8601"
      deadline:
        type: "integer"
        format: "int32"
        example: 10
        description: "Number of days for the deadline"
      advanceSale:
        type: "integer"
        format: "int32"
        example: 10
        description: "Number of days to sell the product in advance"
      codeExternal:
        type: string
        example: 'FT123RT'
        description: "Identify the external code of the product."
      notSoldSeparately:
        type: boolean
        example: false
      scopingValidityParameters:
        $ref: '#/definitions/ScopingValidityParameter'
      temporalValidityParameters:
        type: array
        items:
          $ref: '#/definitions/TemporalValidityParameter'
      usageParameters:
        $ref: '#/definitions/UsageParameter'
      scopingGeographicalParameters:
        $ref: '#/definitions/ScopingGeographicalParameter'
      distributionTouchPoints:
        type: array
        items:
          $ref: '#/definitions/DistributionTouchPoint'
      mediaSet:
        type: array
        items:
          $ref: '#/definitions/MediaSet'
      fareTable:
        $ref: '#/definitions/FareTable'
      fareFrame:
        $ref: '#/definitions/FareFrame'
      customerNumber:
        type: integer
        description: "Customer number"
        example: 1
      sellers:
        type: array
        items:
          $ref: "#/definitions/OrganisationRef"
      promotions:
        type: array
        items:
          $ref: "#/definitions/Promotion"

  FareFrame:
    type: object
    properties:
      fareFrameId:
        type: string
        example: 'MOP.V1'
        description: "Identifier of  FARE FRAME."
      fareFrameName:
        type: string
        example: 'MOP'
        description: "Description"
      organisations:
        type: array
        description: "Set of organisations having a role in the fareFrame."
        items:
          $ref: '#/definitions/Organisation'

  Organisation:
    type: object
    description: "An legally incorporated body associated with any aspect of the transport system."
    properties:
      organisationName:
        type: string
        example: ATM
        description: "Legal name of ORGANISATION."
      organisationId:
        type: string
        example: 9
        description: "Identifier of ORGANISATION."
      publicCode:
        type: string
        example: ATM
        description: "Alternative public identifier of ORGANISATION."
      organisationTypeCode:
        type: string
        example: AT
        description: >
          Type of ORGANISATION. 
          Possible values:
            * AT - Authority
            * OP - Operator
            * CO - Configurator
            * DO - Distributor
            * OW - Owner
        enum: [ AT, OP, CO, DO, OW ]
      agreements:
        type: array
        description: "Set of agreement between ORGANISATIONs in the fareFrame."
        items:
          $ref: '#/definitions/Agreement'

  Agreement:
    type: object
    description: "Identify the agreement between two ORGANISATION."
    properties:
      agreementId:
        type: string
        example: "SA-ATM-RadioTaxi"
        description: "Identifier of Agreement."
      agreementType:
        type: string
        enum: [ SA, CA, SL ]
        description: >
          Possible values:
            * SA - Service Agreement
            * CA - Configuration Agreement
            * SL - Sales Agreement
        example: SA
      organisationIdMaster:
        type: string
        example: "ATM"
        description: "Identifier of Organization referencing the Main Organization."
      organisationIdSecondary:
        type: string
        example: "RadioTaxi"
        description: "Identifier of Organization referencing the  Secondary Organization."
      agreementDate:
        type: string
        format: date
        description: "Identify the agreement date. ISO8601"
        example: '2018-09-04'

  ScopingValidityParameter:
    type: object
    description: "SCOPING VALIDITY PARAMETERs, reflecting mainly spatial limitations. The Scoping Validity Parameters allows one or more validity parameters to be assigned. The many different possible parameters are organized into five groups. (Organisation, Network, Route, Service, Product) "
    properties:
      services:
        type: array
        description: "List of the services related top the parameter."
        items:
          $ref: '#/definitions/Service'
      fareZones:
        type: array
        description: "List of the fare Zone related top the parameter."
        items:
          $ref: '#/definitions/FareZone'

  Service:
    type: object
    description: "A type of VALIDITY PARAMETER related to service characteristics. Example BUS"
    properties:
      scopingValidityParameterId:
        type: string
        description: "Identifier of Service."
        example: 'SR.TM.UBRAIL'
      scopingValidityParameterName:
        type: string
        description: "Parameter Service Name."
        example: 'Urban Railway'
      scopingValidityClassificationCode:
        type: string
        description: >
          Service Classification.
          Possible values:
            * FC - FareClass
            * FS - Facility Set
            * TN - Train Number
            * VJ - Vehicle Journey
            * GOS - Group of service
            * TM - Transport Mode
        enum: [ FC, FS, TN, VJ, GOS, TM ]
        example: FC
      scopingValidityParameterType:
        type: string
        description: "Type of service to which assignment is made, for example whether the assignment is a night train."
      scopingValidityTransportModeCode:
        type: string
        description: "Service Transport Mode Code"
        example: '01.00'
      codeExternal:
        type: string
        description: "External Code"
        example: '3'
      serviceOrganisationRef:
        type: string
        description: "Reference to the Organization Providing the service."
        example: 'ATM'
      lines:
        type: array
        items:
          $ref: '#/definitions/Line'
  Line:
    type: object
    description: "Service Line"
    properties:
      lineId:
        type: string
        description: "Line identifier"
        example: 'TNLINE00000000000003'
      lineDescription:
        type: string
        description: "Line Description"
        example: "Malpensa-Milano"
      transportModeCode:
        type: string
        description: "Transport Mode Code"
        example: '01.00'
      transportModeDescription:
        type: string
        description: "Transport Mode Description"
        example: 'Bus'
      transportSubModeCode:
        type: string
        description: "Transport Sub Mode Code"
        example: '01.01'
      transportSubModeDescription:
        type: string
        description: "Transport Sub Mode Description"
        example: 'Bus Notturno'

  ServiceRef:
    type: object
    description: "Reference to a service."
    properties:
      serviceId:
        type: string
        description: "Identifier of Service."
        example: 'SR.TM.UBRAIL'
      serviceName:
        type: string
        description: "Service Name."
        example: 'Urban Railway'
      serviceOrganisationRef:
        type: string
        description: "Reference to the Organization Providing the service."
        example: 'ATM'
      transportModeCode:
        type: string
        description: "Service Transport Mode Code"
        example: '01.00'

  ServiceRestriction:
    type: object
    description: "Restriction of a service."
    properties:
      restrictionOn:
        type: string
        description: "The target of the restriction."
        example: LINE
        enum: [ LINE ]
      restrictionType:
        type: string
        description: "The type of the restriction."
        example: ONCE_FOR_LINE
        enum: [ ONCE_FOR_LINE ]

  RestrictedServiceRef:
    allOf:
      - $ref: '#/definitions/ServiceRef'
    type: object
    description: "Reference to a service with the relative restriction."
    properties:
      serviceRestriction:
        $ref: '#/definitions/ServiceRestriction'

  FareZone:
    type: object
    description: "A tariff Zone parameter limiting access rights to spatial elements. "
    properties:
      scopingValidityParameterId:
        type: string
        description: "Identifier of  Network Element."
        example: 'NT.TF.HZ12'
      scopingValidityParameterName:
        type: string
        description: "Network Element Name."
        example: 'MLIANO 1 ZONA'
      scopingValidityParameterType:
        type: string
        enum: [ GRP.NT, NT ]
        description: >
          Possible values:
            * GRP.NT - Group of Network Element
            * NT - Network Element
        example: GRP.NT
      permutationKNumber:
        type: integer
        description: "Indicate the number of elements for which the permutation is made. k-permutations of n (is the number of elements in the group)."
        example: "2"
      groupType:
        type: string
        description: >
          Identify the type of the Group (when the parameter is a group).
          Possible values:
            * FIXED - the group is a fixed combination of the elements of the group
            * COMBINED - the group is a variable combination of the elements. The combination (permutation) Is based on the number specified in the filed Permutation K Number
        enum: [ FIXED, COMBINED ]
        example: FIXED
      zones:
        type: array
        description: "List of the Zone inbcluded considered in the Parameter.List of the Zones considered in the Parameter."
        items:
          $ref: '#/definitions/Zone'
  Zone:
    type: object
    properties:
      zoneWeight:
        type: integer
        description: "Indicate the weight related to the zone."
        example: 10
      codeExternal:
        type: string
        description: "External Code."
        example: 'NT.TF.HZ4'
      networkElementId:
        type: string
        description: "Identifier of Network Element."
        example: 'NT.TF.HZ4'
      networkElementName:
        type: string
        description: "Name of Network Element."
        example: 'Half Zone 4'
      appliedTariffType:
        type: string
        description: >
          Applied Tariff Type.
          Possible values:
            * INT - Interval Km
            * NUMZ - Number of Zone
            * ZONE - Zone
        enum: [ INT, NUMZ, ZONE ]
        example: INT
  TemporalValidityParameter:
    type: object
    description: "Species the temporal access right restrictions made by an ACCESS RIGHT PARAMETER ASSIGNMENT"
    properties:
      temporalValidityParameterId:
        type: string
        description: "Temporal Validity Parameter Identifier"
        example: '7aa3f4e5-af80-11e8-bbfb-590368d44d7d'
      temporalValidityParameterName:
        type: string
        description: "Temporal Validity Parameter Name"
        example: 'temporal 29 august'
      dayType:
        $ref: '#/definitions/DayType'
      datetimeBands:
        type: array
        items:
          $ref: '#/definitions/DateTimeBand'
  DayType:
    type: object
    description: "A type of day characterized by one or more properties which affect public transport operation."
    properties:
      name:
        type: string
        description: "Name of  DAY TYPE."
        example: 'Weekdays unless a holiday'
      dayTypeId:
        type: string
        description: "Identifier of  DAY TYPE."
        example: 'DT_01-MF-NH'
      properties:
        type: string
        description: "PROPERTIEs"
        example: '<PropertyOfDay><DaysOfWeek>Monday Tuesday Wednesday Thursday Friday</DaysOfWeek><HolidayTypes>NotHoliday</HolidayTypes></PropertyOfDay>'
  DateTimeBand:
    type: object
    description: "A period in a day or a range od date, significant for some aspect of public transport, e.g. similar traffic conditions or fare category. This is used to specify a band period in which the product can be Used."
    properties:
      dateEnd:
        type: string
        format: date
        description: "Inclusive end date of date TIME BAND. ISO8601"
        example: '2018-09-30'
      timeEnd:
        type: string
        format: time
        description: "Inclusive end time of TIME BAND. ISO8601"
        example: '09:29:00'
      typeBand:
        type: string
        description: >
          Type Band Code. 
          Possible values:
            * D - Day
            * T - Time
            * DT - Date time
            * GRP - Group
        enum: [ D, T, DT, GRP ]
        example: D
      dateStart:
        type: string
        format: date
        description: "Inclusive start date of date TIME BAND. ISO8601"
        example: '2017-09-30'
      timeStart:
        type: string
        format: time
        description: "Inclusive start time of TIME BAND. ISO8601"
        example: '09:29:00'
      blackOutUse:
        type: string
        description: >
          When start of travel restriction applies.
          Possible values:
            * noTravelWithinPeriod - No travel permitted within exclusion period.
            * mayCompleteIfStartedBefore - Outward and return journeys may be completed if started before exclusion period.
            * noTravelWithinTimeband - No travel permitted within exclusion timeband.
        enum: [ noTravelWithinPeriod, mayCompleteIfStartedBefore, noTravelWithinTimeband ]
        example: noTravelWithinPeriod
      datetimeBandId:
        type: string
        description: "Identifier of Date TIME BAND."
        example: 'Peak'
      codeExternal:
        type: string
        description: "Date TIME BAND. External Code"
        example: 'Peak'
  UsageParameter:
    type: object
    description: "Parameters which affect the actual use of access rights, such as USER PROFILE, FREQUENCY OF USE, TRANSFERABILITY, etc"
    properties:
      validityPeriods:
        type: array
        items:
          $ref: '#/definitions/ValidityPeriod'
      customerProfiles:
        type: array
        items:
          $ref: '#/definitions/CustomerProfile'
      frequenciesOfUse:
        type: array
        items:
          $ref: '#/definitions/FrequenciesOfUse'
      luggageSetAllowance:
        type: array
        items:
          $ref: '#/definitions/LuggageSetAllowance'
      transferability:
        $ref: '#/definitions/Transferability'
  ValidityPeriod:
    type: object
    description: "A time limitation for validity of a FARE PRODUCT or a SALES PACKAGE. It may be composed of a standard duration (e.g. 3 days, 1 month)."
    properties:
      usageParameterId:
        type: string
        description: "Identifier of USAGE VALIDITY PERIOD."
        example: '2c8b317e-a462-11e8-af67-37c61bc0a4a7'
      usageParameterName:
        type: string
        description: "Name of USAGE VALIDITY PERIOD."
        example: "90 Minutes"
      typeUsageParameter:
        type: string
        description: >
          Type of  VALIDITY PERIOD.
          Possible values:
            * VP - Validity Period
        enum: [ VP ]
        example: VP
      validityPeriodName:
        type: string
        example: 'Ride'
      validityPeriodType:
        type: string
        enum: [ C, D, H, M, T, W, Y ]
        description: >
          Possible values:
            * C - Ride
            * D - Days
            * H - Hours
            * M - Months
            * T - Minutes
            * W - Weeks
            * Y - Years
        example: C
      standardDuration:
        type: integer
        description: "Duration of  VALIDITY PERIOD after departure. or validation"
        example: 3
      trigger:
        $ref: '#/definitions/Trigger'
  Trigger:
    type: object
    description: "Identify the type of period or the event to start the validity."
    properties:
      usageTriggerType:
        type: string
        description: >
          Identify the type of trigger to start the validity.
          Possible values:
            * GGMM - Day of month
            * GGSE - Day of week
            * I - Fixed
            * MM - Month
            * P - Sale
            * V - Validation
        enum: [ GGMM, GGSE, I, MM, P, V ]
        example: GGMM
      startValidation:
        type: string
        example: '15-February'
      usageTriggerPeriod:
        type: string
        description: "Code od the period to start the validity."
        example: 'DM000215'
  TravelSummary:
    title: TravelSummary
    description: 'contains informations about the trip: duration and distance traveled'
    type: object
    properties:
      distance:
        type: integer
        format: int32
        example: 100
        description: Defines the distance travelled during the trip.
      distanceUnit:
        type: string
        example: KILOMETERS
        enum: [ CENTIMETERS, FEET, INCH, KILOMETERS, METERS, MILES, MILLIMETERS, NAUTICALMILES, YARD  ]
        description: Defines the unit of measurement of the distance.
      duration:
        type: integer
        format: int32
        example: 55
        description: Defines the time elapsed in the trip
      durationUnit:
        type: string
        example: MINUTES
        enum: [ SECONDS, MINUTES, HOURS, DAYS, WEEKS, MONTHS, YEARS ]
        description: Defines the unit of time of the distance.

  CustomerProfile:
    type: object
    description: "The social profile of a passenger, based on age group, education, profession, social status, sex etc., often used for allowing discounts: 18-40 years old, graduates, drivers, unemployed, women etc."
    properties:
      usageParameterId:
        type: string
        description: "Identifier of Customer PROFILE."
        example: 'CP.SPN'
      usageParameterName:
        type: string
        description: "Name of Customer PROFILE."
        example: 'Special needs'
      typeUsageParameter:
        type: string
        example: CP
        enum: [ CP ]
        description: " CP: Customer Profile"
      minimumAge:
        type: integer
        description: "Minimum age  for membership of Customer PROFILE."
        example: 10
      maximumAge:
        type: integer
        description: "Maximum age  for membership of Customer PROFILE."
        example: 18
      minimumHeight:
        type: integer
        description: "Minimum height for membership of Customer PROFILE."
        example: 10
      maximumHeight:
        type: integer
        description: "Maximum height for membership of Customer PROFILE."
        example: 18
      minimumIncome:
        type: number
        description: "Minimum income  for membership of Customer PROFILE."
        example: 1000
      maximumIncome:
        type: number
        description: "Maximum income for membership of Customer PROFILE."
        example: 2000
      localResident:
        type: integer
        description: "Whether Customer must be local resident. This is a general categorization. A more specific definition can be provided by RESIDENTIAL QUALIFICATION."
        example: 1
  FrequenciesOfUse:
    type: object
    description: "The limits of usage frequency for a FARE PRODUCT during a specific VALIDITY PERIOD. Example:oneTrip, multiTrip, unlimited"
    properties:
      usageParameterId:
        type: string
        description: "Identifier of FREQUENCY OF USE."
        example: 'FQ.U'
      usageParameterName:
        type: string
        description: "Name of FREQUENCY OF USE."
        example: 'Unlimited'
      typeUsageParameter:
        type: string
        enum: [ FQ ]
        description: "FQ: Frequency of Use "
        example: FQ
      maximalFrequency:
        type: integer
        description: "Maximal number of times can be used."
        example: 9999
      minimalFrequency:
        type: integer
        description: "Minimum number of times can be used."
        example: 1
      service:
        $ref: '#/definitions/RestrictedServiceRef'
  LuggageSetAllowance:
    type: object
    description: "The number and characteristics (weight, volume) of luggage that a holder of an access right is entitled to carry."
    properties:
      usageParameterId:
        type: string
        description: "Identifier of LUGGAGE ALLOWANCE."
        example: 'LG.GFB'
      usageParameterName:
        type: string
        description: "Name of LUGGAGE ALLOWANCE."
        example: 'Folding bike'
      typeUsageParameter:
        type: string
        enum: [ LG ]
        description: "LG: Luggage"
        example: LG
      numberItems:
        type: integer
        description: "Number of bags allowed."
        example: 1
      totalWeight:
        type: integer
        description: "Total Weight limit of LUGGAGE ALLOWANCE."
        example: 15
      baggageType:
        type: string
        description: >
          Type of baggage covered by the allowance.
          Possible values:
            * LGGFB - Folding bike
            * LGGLB - Large Bag
            * LGGMB - Medium Bag
            * LGGN - Luggagge None
            * LGGSB - Small Bag
            * LGGSP - Small pets
        enum: [ LGGFB, LGGLB, LGGMB, LGGN, LGGSB, LGGSP ]
        example: LGGFB
      service:
        $ref: '#/definitions/ServiceRef'
  Transferability:
    type: object
    description: "The number and characteristics of persons entitled to use the public transport service instead of the original customer."
    properties:
      usageParameterId:
        type: string
        description: "Identifier of TRANSFERABILITY."
        example: 'TR.CANNOTT'
      usageParameterName:
        type: string
        description: "Name of TRANSFERABILITY."
        example: 'can Not Transfer'
      typeUsageParameter:
        type: string
      canTransfer:
        type: boolean
        description: "Whether ticket can be transferred to someone else."
        example: true
      maximumNumberOfNamedTransferees:
        type: integer
        description: "Where a product can be used by a limited number of named users, maximum number of users allowed."
        example: 0
  ScopingGeographicalParameter:
    type: object
    description: "The value of a GEOGRAPHICAL INTERVAL or a DISTANCE MATRIX ELEMENT"
    properties:
      geographicalIntervals:
        type: array
        description: "List of geographical interval specifying access rights for the FARE STRUCTURE ELEMENTs within the range of this interval: 0-5 km, 4-6 zones etc."
        items:
          $ref: '#/definitions/GeographicalInterval'
      distanceMatrixElements:
        type: array
        items:
          $ref: '#/definitions/DistanceMatrixElement'
  GeographicalInterval:
    type: object
    description: "List of geographical interval specifying access rights for the FARE STRUCTURE ELEMENTs within the range of this interval: 0-5 km, 4-6 zones etc."
    properties:
      scopingGeographicalId:
        type: string
        description: "Identifier of GEOGRAPHICAL INTERVAL."
        example: 'D.0.50'
      scopingGeographicalName:
        type: string
        description: "Name of GEOGRAPHICAL INTERVAL."
        example: 'From 0 to 100'
      scopingGeographicalType:
        type: string
        description: >
          Geographical Element Type Code.
          Possible values:
            * GINT - Geographical Interval
            * GINF - Geographical Interval Fixed
        enum: [ GINT, GINF ]
        example: GINT
      unitNumber:
        type: integer
        description: "Number of unit."
      intervalType:
        type: string
        description: >
          Type of Interval unit.
          Possible values:
            * CO - coupon
            * D - distance
            * S - Stop
            * T - Tariff Zone
        enum: [ CO, D, S, T ]
        example: D
      endGeographicalInterval:
        type: number
        format: double
        description: "End value for GEOGRAPHICAL INTERVAL."
        example: '50'
      startGeographicalInterval:
        type: number
        format: double
        description: "Start value for GEOGRAPHICAL INTERVAL."
        example: '0'
  DistanceMatrixElement:
    type: object
    description: "A cell of an origin-destination matrix for TARIFF ZONEs or STOP POINTs, expressing a fare distance for the corresponding trip: value in km, number of fare units etc."
    properties:
      scopingdistanceMatrixElementId:
        type: string
        description: "Identifier of a DISTANCE MATRIX ELEMENT."
        example: 'xxxx2'
      scopingdistanceMatrixElementName:
        type: string
        description: "Name of a DISTANCE MATRIX ELEMENT."
        example: 'BtoC'
      originScheduledStoppoint:
        type: string
        description: "Details of origin SCHEDULED STOP POINT"
        example: 'B'
      destinationScheduledStoppoint:
        type: string
        description: "Details of destination SCHEDULED STOP POINT"
        example: 'C'
      distance:
        type: integer
        description: "Distance between origin and destination of a DISTANCE MATRIX ELEMENT."
        example: 111
      startScheduledStoppoint:
        type: string
        description: "Start SCHEDULED STOP POINT at which a DISTANCE MATRIX ELEMENT begins."
        example: ''
      endScheduledStoppoint:
        type: string
        description: "End SCHEDULED STOP POINT at which a DISTANCE MATRIX ELEMENT ends."
        example: ''
      startTariffZone:
        type: string
        description: "Start TARIFF ZONE at which a DISTANCE MATRIX  ELEMENT. begins."
        example: ''
      endTariffZone:
        type: string
        description: "End TARIFF ZONE at which a DISTANCE MATRIX  ELEMENT. begins."
        example: ''
  DistributionTouchPoint:
    type: object
    description: "An assignment  of the   DISTRIBUTION CHANNEL/TOUCHPOINT through which a product may or may not be distributed."
    properties:
      touchPoints:
        type: array
        items:
          $ref: '#/definitions/TouchPoint'
      endValidity:
        type: string
        description: "Identify the end validity  date of association between the product and the distribution. ISO8601"
        format: date
        example: '2018-09-04'
      startValidity:
        type: string
        description: "Identify the start validity  date of association between the product and the distribution. ISO8601"
        format: date
        example: '2018-09-04'
      distributionAssignmentId:
        description: "Identifier of a  DISTRIBUTION ASSIGNMENT."
        type: string
        example: "xxxx.xxxx"
      distributionTouchpointType:
        type: string
        description: >
          Classification of the DISTRIBUTION TOUCHPOINT/CHANNEL.
          Possible values:
            * atStop - At stop sales
            * onBoard - On-board sales
            * online - On-line sales
            * telephone - Telephone sales
            * electronicPass - Electronic sale
            * HCE - Mobile device
            * agency - Third party agency
            * tourOperator - Tour operator
            * TVM - Ticket Vending Machine
            * other - Other channel
            * GRPTouchPoint - Group of touch Point
            * TO - Ticket Office
            * VA - Validator
            * MApp - MApp
            * POS - POS
            * Wapp - Wapp
            * OBS - On Board Sale
        example: atStop
        enum:
          - atStop
          - onBoard
          - online
          - telephone
          - electronicPass
          - HCE
          - agency
          - tourOperator
          - TVM
          - other
          - GRPTouchPoint
          - TO
          - VA
          - MApp
          - POS
          - Wapp
          - OBS
  Promotion:
    type: object
    description: "List of the possible promotion."
    properties:
      promotionAssignmentId:
        description: "Identifier of a  Promotion ASSIGNMENT"
        type: string
        example: "xxxx.xxxx"
      promotionId:
        description: "Identifier of a  Promotion"
        type: string
        example: "xxxx.xxxx"
      promotionName:
        type: string
        description: "Description."
        example: "BtoC"
      promotionType:
        $ref: "#/definitions/PromotionType"
      promotionValue:
        type: number
        description: "Promotion Value"
        example: 30
      isCombinable:
        type: boolean
        description: "Is combinable."
        example: false
      customerProfile:
        $ref: "#/definitions/CustomerProfile"
      endValidity:
        type: string
        format: date
        description: "Identify the end validity  date of association between the product and the media. ISO8601"
        example: "2018-09-04"
      startValidity:
        type: string
        description: "Identify the start validity  date of association between the product and the media. ISO8601"
        format: date
        example: "2018-09-04"
  PromotionType:
    type: object
    properties:
      promotionType:
        type: string
        description: >
          Promotion code type.
          Possible values: 
            * F - Fixed
            * P - Percentage
        example: F
        enum:
          - F
          - P
      promotionTypeDesc:
        type: string
        description: "Description promotion type"
  PromotionRef:
    type: object
    properties:
      promotionId:
        description: "Identifier of a  Promotion."
        type: string
        example: "xxxx.xxxx"
      promotionDescription:
        type: string
        description: "Description of a  Promotion."
        example: "BtoC"
  TouchPoint:
    type: object
    description: "A type of outlet for selling a product."
    properties:
      distributionTouchpointId:
        type: string
        description: "Identifier of a DISTRIBUTION TOUCHPOINT/CHANNEL."
        example: '317d58cd-af76-11e8-8e23-d7566f1d5818'
      distributionTouchpointName:
        type: string
        description: "Short Name of DISTRIBUTION TOUCHPOINT/CHANNEL."
        example: 'TVM Milan'
      codeExternal:
        type: string
        description: "External Code"
        example: 'TVMMI'
      distributionTouchpointType:
        type: string
        description: >
          Classification of the DISTRIBUTION TOUCHPOINT/CHANNEL.
          Possible values:
            * atStop: At stop sales
            * onBoard: On-board sales
            * online: On-line sales
            * telephone: Telephone sales
            * electronicPass: Electronic sale
            * HCE: Mobile device
            * agency: Third party agency
            * tourOperator: Tour operator
            * TVM: Ticket Vending Machine
            * other: Other channel
            * GRPTouchPoint: Group of touch Point
            * TO: Ticket Office
            * VA: Validator
            * MApp: MApp
            * POS: POS
            * Wapp: Wapp
            * OBS: On Board Sale
        enum: [ atStop, onBoard, online, telephone, electronicPass, HCE, agency, tourOperator, TVM, other, GRPTouchPoint, TO, VA, MApp, POS, Wapp, OBS ]
        example: GRPTouchPoint
  MediaSet:
    type: object
    description: "An assignment  of the  MEDIA through which a product will be materialized."
    properties:
      mediaTypeRef:
        $ref: "#/definitions/MediaTypeRef"
      mediaAssignmentId:
        type: string
        description: "Identifier of a  MEDIA ASSIGNMENT."
        example: 'XXX.YYY'
      endValidity:
        type: string
        format: date
        description: "Identify the end validity  date of association between the product and the media. ISO8601"
        example: '2018-09-04'
      startValidity:
        type: string
        description: "Identify the start validity  date of association between the product and the media. ISO8601"
        format: date
        example: '2018-09-04'
  MediaTypeRef:
    type: object
    description: "Media type classification"
    properties:
      mediaType:
        type: string
        description: >
          Media Type Code.
          Possible values:
            * HCE: Host Card Emulation
            * SC: Smart Card
            * PPR: Paper
            * PPRS: Pre Printed
            * MOB: Mobile
            * VT: Virtual Ticket
            * CP: Chip on Paper
            * EMV: EMV
            * CIE: Carta Identità Elettronica
            * CNS: Carta Nazionale Servizi
        enum: [ HCE, SC, PPR, PPRS, MOB, VT, CP, EMV, CIE, CNS ]
        example: HCE
      descriptionType:
        type: string
        example: Mobile
  FareTable:
    type: object
    description: "A FARE TABLE Cell allows the representation of groups of prices for combinations of fare elements. In effect it defines a multi-dimensional matrix of cells, each of which may state a FARE PRICE (as either a reference or directly) for a combination of one or more fare elements. For example one might have USER PROFILE + DISTANCE MATRIX ELEMENT references on each cell in order to define adult and child fares. "
    properties:
      cells:
        description: "List of cell"
        type: array
        items:
          $ref: '#/definitions/Cell'
  Cell:
    type: object
    description: "An unique individual combination of features within a FARE TABLE, used to associate a FARE PRICE with  a fare element."
    properties:
      cellId:
        type: string
        description: "Identifier of CELL."
        example: 'XXXX-3'
      cellName:
        type: string
        description: "Name of CELL."
        example: 'namecell3'
      ccyPrice:
        type: string
        description: "currency Code ISO 4217."
        example: 'EUR'
      farePrice:
        type: number
        description: "Cel Price."
        example: 1.3
      points:
        type: integer
        description: "Number of points"
        example: 10
      priceFor:
        $ref: '#/definitions/PriceFor'
  PriceFor:
    type: object
    description: "parameter Identifing the PRICE"
    properties:
      serviceRef:
        $ref: '#/definitions/ServiceRef'
      fareZoneRef:
        $ref: '#/definitions/FareZoneRef'
      validityPeriodRef:
        $ref: '#/definitions/ValidityPeriodRef'
      customerProfileRef:
        $ref: '#/definitions/CustomerProfileRef'
      distributionTouchPointRef:
        $ref: '#/definitions/DistributionTouchPointRef'
      geographicalIntervalRef:
        $ref: '#/definitions/GeographicalIntervalRef'
      distanceMatrixRef:
        $ref: '#/definitions/DistanceMatrixElementRef'
      mediaTypeRef:
        $ref: '#/definitions/MediaTypeRef'
      temporalValidityRef:
        $ref: '#/definitions/TemporalValidityRef'
  FareZoneRef:
    type: object
    description: "A tariff Zone parameter limiting access rights to spatial elements."
    properties:
      fareZoneId:
        description: "Identifier of Network Element."
        type: string
        example: 'NT.TF.HZ16'
      fareZoneName:
        type: string
        description: "Network Element Name."
        example: 'Half Zone 4'
  ValidityPeriodRef:
    type: object
    description: "A time limitation for validity of a FARE PRODUCT or a SALES PACKAGE. It may be composed of a standard duration (e.g. 3 days, 1 month)."
    properties:
      validityPeriodId:
        type: string
        description: "Identifier of USAGE VALIDITY PERIOD."
        example: '2c8b317e-a462-11e8-af67-37c61bc0a4a7'
      validityPeriodName:
        type: string
        description: "Name of USAGE VALIDITY PERIOD."
        example: "90 Minutes"
  CustomerProfileRef:
    type: object
    description: "The social profile of a passenger, based on age group, education, profession, social status, sex etc., often used for allowing discounts: 18-40 years old, graduates, drivers, unemployed, women etc."
    properties:
      customerProfileId:
        type: string
        description: "Identifier of Customer PROFILE."
        example: 'CP.SPN'
      customerProfileName:
        type: string
        description: "Name of Customer PROFILE."
        example: 'Special needs'
  DistributionTouchPointRef:
    type: object
    description: "A type of outlet for selling a product."
    properties:
      distributionTouchpointId:
        type: string
        description: "Identifier of a DISTRIBUTION TOUCHPOINT/CHANNEL."
        example: '317d58cd-af76-11e8-8e23-d7566f1d5818'
      distributionTouchpointName:
        type: string
        description: "Short Name of DISTRIBUTION TOUCHPOINT/CHANNEL."
        example: 'TVM Milan'
      distributionTouchpointType:
        type: string
        description: "Code type of distribution touchpoint"
        example: "TVM"
  GeographicalIntervalRef:
    type: object
    description: "List of geographical interval specifying access rights for the FARE STRUCTURE ELEMENTs within the range of this interval: 0-5 km, 4-6 zones etc."
    properties:
      geographicalId:
        type: string
        description: "Identifier of GEOGRAPHICAL INTERVAL."
        example: 'D.0.50'
      geographicalName:
        type: string
        description: "Name of GEOGRAPHICAL INTERVAL."
        example: 'From 0 to 100'
  OrganisationRef:
    type: object
    properties:
      id:
        type: string
        example: "2"
      name:
        type: string
        example: "TRENORD"
  DistanceMatrixElementRef:
    type: object
    description: "A cell of an origin-destination matrix for TARIFF ZONEs or STOP POINTs, expressing a fare distance for the corresponding trip: value in km, number of fare units etc."
    properties:
      distanceMatrixElementId:
        type: string
        description: "Identifier of a DISTANCE MATRIX ELEMENT."
        example: 'xxxx2'
      distanceMatrixElementName:
        type: string
        description: "Name of a DISTANCE MATRIX ELEMENT."
        example: 'BtoC'
  TemporalValidityRef:
    type: object
    description: "Species the temporal access right restrictions made by an ACCESS RIGHT PARAMETER ASSIGNMENT."
    properties:
      temporalValidityId:
        type: string
        description: "Identifier of Temporal Validity."
        example: 'DT_01-MF-NH'
      temporalValidityName:
        type: string
        description: "Name of Temporal Validity."
        example: "Weekdays unless a holiday"
  SalesPackage:
    type: object
    description: "A package to be sold as a whole, consisting of one or several FARE PRODUCTs materialised thanks to one or several TRAVEL DOCUMENTs. The FARE PRODUCTs may be either directly attached to the TRAVEL DOCUMENTs, or may be reloadable on the TRAVEL DOCUMENTs."
    properties:
      salesPackageId:
        type: string
        example: "16e47f89-b017-11e8-8a96-a79e969e4d55"
        description: "Unique Identifier of Sales Package."
      salesPackageVersion:
        type: integer
        description: "Sales Package version"
        example: 1
      salesPackageName:
        type: string
        example: "Rome Urban"
        description: "Sales Package name."
      salesPackageType:
        type: string
        example: "1"
        description: "Sales Package Type. PRE-ASSIGNED FARE PRODUCT (single ticket, monthly); AMOUNT OF PRICE UNIT( value cards or electronic purses, which are debited for each transaction)"
      salesPackageTypeDesc:
        type: string
        example: "single ticket"
        description: "Sales Package type description"
      salesPackageStartValidity:
        type: string
        format: date
        example: "2018-09-04"
        description: "Identify the start validity  date of the sales package. ISO8601"
      salesPackageEndValidity:
        type: string
        format: date
        example: "2018-09-04"
        description: "Identify the end validity  date of the sales package. ISO8601"
      customerNumber:
        type: integer
        description: "Customer number"
        example: 1
      deadline:
        type: integer
        description: "Number of the days for the dead line."
        example: 1
      advanceSale:
        type: integer
        description: "Number of days to sell the product in advance respect the start date."
        example: 1
      sellers:
        type: array
        items:
          $ref: "#/definitions/OrganisationRef"
      codeExternal:
        type: string
        example: "FT123RT"
        description: "Identify the external code of the sales package."
      points:
        type: integer
        description: "Number of points"
        example: 10
      salesPackagePrice:
        type: number
        description: "Price of sales package"
        example: 20.5
      ccyPrice:
        type: string
        description: "currency Code ISO 4217."
        example: "EUR"
      usageParameter:
        type: object
        description: "Parameters which affect the actual use of access rights, such as USER PROFILE, etc"
        properties:
          validityPeriods:
            type: array
            items:
              $ref: "#/definitions/ValidityPeriod"
          customerProfiles:
            type: array
            items:
              $ref: "#/definitions/CustomerProfile"
      distributionTouchPoints:
        type: array
        items:
          $ref: "#/definitions/DistributionTouchPoint"
      promotions:
        type: array
        items:
          $ref: "#/definitions/Promotion"
      mediaSet:
        type: array
        items:
          $ref: "#/definitions/MediaSet"
      fareProducts:
        type: array
        items:
          $ref: '#/definitions/LinkedFareProduct'
      genericProducts:
        type: array
        items:
          $ref: '#/definitions/LinkedGenericProduct'
      fareFrame:
        $ref: '#/definitions/FareFrame'
  LinkedGenericProduct:
    type: object
    properties:
      genericProduct:
        $ref: '#/definitions/GenericProduct'
      quantity:
        type: integer
        example: 2
  LinkedFareProduct:
    type: object
    properties:
      fareProduct:
        $ref: '#/definitions/Product'
      quantity:
        type: integer
        example: 2
  GenericProduct:
    type: object
    description: "TBD"
    properties:
      id:
        type: string
        example: "16e47f89-b017-11e8-8a96-a79e969e4d55"
        description: "Unique Identifier of Generic Product"
      name:
        type: string
        example: "Cinema"
        description: "Generic Product name"
      shortName:
        type: string
        example: "CM_01"
        description: "Generic Product short name"
      type:
        type: string
        example: "CC"
        description: "Generic Product type"
      typeDesc:
        type: string
        example: "Cinema"
        description: "Generic Product type description"
      startValidity:
        type: string
        format: date
        example: "2018-09-04"
        description: "Identify the start validity  date of the Generic Product. ISO8601"
      endValidity:
        type: string
        format: date
        example: "2018-09-04"
        description: "Identify the end validity  date of the Generic Product. ISO8601"
      codeExternal:
        type: string
        example: "FT123RT"
        description: "Identify the external code of the Generic Product"
      ccyPrice:
        type: string
        description: "currency Code ISO 4217."
        example: "EUR"
      price:
        type: number
        description: "Price of generic product"
        example: 20.5

  JourneyGroup:
    type: object
    properties:
      id:
        type: "string"
        format: "uuid"
        example: '410821d7-7720-4d09-8987-faa104930bd2'
        description: 'Identifier of the group.'
      closingDate:
        type: "string"
        format: "date"
        example: "2018-04-02T00:00:00Z"
        description: 'Date in which the journey was closed.'
      status:
        type: "string"
        example: OPEN
        description: 'Status of the group'
        enum:
          - OPEN
          - CLOSED
          - CANCELLED
          - ERROR
      partyAccountId:
        type: "string"
        format: "uuid"
        example: '5dce13c8-49e1-4a55-a3f0-a40076222359'
        description: 'Identifier of the party account (customer).'
      purchaseTransactionId:
        type: "string"
        format: "uuid"
        example: 'bf4d7d62-aa4e-463c-945f-b3a982c05a5f'
        description: 'Identifier of the associated purchase transaction.'
      purchaseTransactionDateTime:
        type: "string"
        format: "date"
        example: "2018-04-02T00:00:00Z"
        description: 'Date in which the purchase was performed.'
      productId:
        type: "string"
        format: "uuid"
        example: 'bf4d7d62-aa4e-463c-945f-b3a982c05a5f'
        description: 'Identifier of the associated product.'
      productName:
        type: "string"
        example: 'Single Ride'
        description: 'Name of the associated product.'
      productPrice:
        type: number
        example: 1.5
        description: 'Price of the associated product.'
      journeys:
        type: "array"
        items:
          $ref: "#/definitions/Journey"

  Journey:
    type: object
    properties:
      journeyId:
        type: "string"
        format: "uuid"
        example: '410821d7-7720-4d09-8987-faa104930bd2'
        description: 'Identifier of the journey.'
      journeyGroupId:
        type: "string"
        format: "uuid"
        example: '410821d7-7720-4d09-8987-faa104930bd2'
        description: 'Identifier of the group.'
      checkin:
        $ref: "#/definitions/Validation"
      checkout:
        $ref: "#/definitions/Validation"

  Validation:
    type: object
    properties:
      transactionId:
        type: "string"
        format: "uuid"
        example: '5dce13c8-49e1-4a55-a3f0-a4007622945f'
        description: 'Identifier of the validation transaction.'
      time:
        type: "string"
        format: "date"
        example: "2018-03-29T12:02:45Z"
        description: 'Validation date.'
      siteCode:
        type: "string"
        example: 'UM'
        description: 'Code of the site where the validation was performed.'
      siteDesc:
        type: "string"
        example: 'Urban zone'
        description: 'Description of the site where the validation was performed.'
      siteDetail:
        type: "string"
        example: 'Porta Nuova'
        description: 'Additional description of the site where the validation was performed.'
      validationDeviceId:
        type: "string"
        example: '8121587163'
        description: 'Identifier of the device that performed the validation.'
      service:
        type: "string"
        example: 'TRAIN'
        description: 'The service used through the validation.'
      operator:
        type: "string"
        example: 'ATM'
        description: 'The operator who provides the service.'

  AccountBasedValidationSummary:
    required:
      - partyAccountId
      - numberOfValidations
      - closingDate
    type: object
    properties:
      partyAccountId:
        type: "string"
        format: "uuid"
        example: 'bcda6736-a412-11ea-bb37-0242ac130002'
        description: 'Identifier of the customer who owns the summary.'
      numberOfValidations:
        type: integer
        example: 2
        description: 'Number of validation performed by the customer during the specified period.'
      closingDate:
        type: "string"
        format: "date"
        example: "2018-03-29T12:02:45Z"
        description: 'Date in which the journeys need to be closed.'
      status:
        type: "string"
        example: TO_ELABORATE
        default: TO_ELABORATE
        description: 'Status of the summary'
        enum:
          - TO_ELABORATE
          - ELABORATED
          - CLOSED
          - CANCELLED

  AccountBasedSummarySession:
    required:
      - sessionId
      - sessionDateTime
      - summaries
    type: object
    properties:
      sessionId:
        type: "string"
        format: "uuid"
        example: 'bcda6b50-a412-11ea-bb37-0242ac130002'
        description: 'Identifier of the summaries session.'
      sessionDateTime:
        type: "string"
        format: "date"
        example: "2018-03-29T12:02:45Z"
        description: 'Date and time of the summaries session.'
      summaries:
        type: "array"
        items:
          $ref: "#/definitions/AccountBasedValidationSummary"

  AccountBasedSummaryResponse:
    type: object
    properties:
      success:
        type: "array"
        items:
          $ref: "#/definitions/AccountBasedSummarySession"
      errors:
        type: "array"
        items:
          $ref: "#/definitions/AccountBasedSummarySession"

  ExtendedDistanceMatrix:
    type: object
    properties:
      lineId:
        type: "string"
        description: 'Line unique identifier'
      lineName:
        type: "string"
        description: 'Line name'
      serviceProvider:
        type: "string"
        description: 'Service provider'
      originElementRef:
        type: "string"
        description: 'Unique origin stop point identifier'
      originElementName:
        type: "string"
        description: 'Name of the origin stop point'
      destinationElementRef:
        type: "string"
        description: 'Unique destination stop point identifier'
      destinationElementName:
        type: "string"
        description: 'Name of the destination stop point'
      geographicalIntervalId:
        type: "string"
        description: 'Unique geographical interval identifier'
      fareZoneId:
        type: "string"
        description: 'Unique fare zone identifier'
      distance:
        type: "integer"
        description: 'Distance in KM between O/D'
      duration:
        type: "integer"
        description: 'Time validity (expressed in minutes) of the related integrated hourly ticket'
      serviceMode:
        type: "string"
        description: >
          Service mode. Possible values:
            * 01.00 - RAIL
            * 05.00 - METRO
            * 07.00 - BUS
        enum:
          - '01.00'
          - '05.00'
          - '07.00'

  GeographicalIntervalLimit:
    type: object
    properties:
      infrastructureElementCode:
        type: string
        description: 'Infrastructure Element identifier'
      infrastructureElementType:
        type: string
        description: 'Infrastructure Element Type'
        example: ROUTE
        enum:
          - ROUTE
          - LINE
      startPoint:
        $ref: '#/definitions/Point'
      endPoint:
        $ref: '#/definitions/Point'
  Point:
    type: object
    properties:
      code:
        type: string
        description: 'Point identifier'
      name:
        type: string
        description: 'Point name'

  ExtendedDistanceMatrixLocation:
    type: object
    properties:
      locationRef:
        type: "string"
        description: 'Unique stop point identifier'
      locationName:
        type: "string"
        description: 'Name of a stop point'
  PrePurchaseConfirmation:
    required:
      - codGateway
      - purchaseRef
      - codTrans
      - result
      - esito
      - importo
      - divisa
    type: object
    properties:
      codGateway:
        $ref: '#/definitions/PaymentGatewayType'
      purchaseRef:
        type: string
        description: Ref to the initialized purchase
        example: '967452e0-073f-11e8-909f-41edf697fe1e'
      codTrans:
        type: string
        description: Transaction id from Payment Gateway
        example: '967452e0-073f-11e8-909f-41edf697fe1e'
      result:
        type: string
        example: CONFIRMED
        enum: [ CONFIRMED, CANCELED ]
        description: 'Defines the pre-purchase result.'
      esito:
        type: string
        description: 'Operation result code from Payment Gateway'
      importo:
        type: string
        description: 'The total amount of the purchase from Payment Gateway'
        example: '3800'
      divisa:
        type: "string"
        description: 'Code currency ISO 4217.'
        example: 'EUR'
      codiceEsito:
        type: string
        description: 'Operation detail result code from Payment Gateway'
      messaggio:
        type: string
        description: 'Operation message from Payment Gateway'
      codAut:
        type: string
        description: 'Operation authorization code from Payment Gateway'
      mac:
        type: string
        description: 'Operation MAC verification code from NEXI Payment Gateway'
      data:
        type: string
        description: 'Operation date authorization from Payment Gateway'
      orario:
        type: string
        description: 'Operation time authorization from Payment Gateway'
  Aztec:
    type: object
    properties:
      ticketId:
        type: string
        description: 'Ticket Id'
      mediaId:
        type: string
        description: 'Media Id'
      customerId:
        type: string
        description: 'Customer Id'
      codeTypePrefix:
        type: string
        description: 'Code type prefix: use FCE01 to get a QRCode image or encrypted and encoded text, TVM01 for a clear text. Default value is FCE01'
      useDefaultExpiration:
        type: boolean
        description: 'Use default expiration: null or true value for default expiration, false for paper ticket expiration'
      outputFormat:
        type: string
        description: 'Output format: null or IMAGE value for a QRCode image, ENCRYPTED_TEXT for an encrypted and encoded text (ONLY for codeTypePrefix FCE01)'
  EnabledPaymentGateway:
    type: object
    properties:
      paymentGateway:
        $ref: '#/definitions/PaymentGatewayType'
      urlPrePurchase:
        type: string
        description: URL to Prepurchase API to be called with the Payment Gateway type
      urlPrePurchaseEPurse:
        type: string
        description: URL to EPurse Prepurchase API to be called with the Payment Gateway type

  BasketItem:
    type: object
    required:
      - itemType
      - itemId
      - itemVersion
      - date
      - quantity
    properties:
      itemType:
        type: "string"
        description: 'Describes the type of item'
      itemId:
        type: string
        format: uuid
        description: 'Product or SalesPackage unique identifier.'
        example: '93c80f89-dd00-4a06-bd7e-5ba1a970cc4c'
      itemVersion:
        type: integer
        description: 'Product or SalesPackage version.'
        example: 1
      date:
        type: string
      fareTableCellId:
        type: "string"
        description: 'Identifier of a Cell of Fare Table of a Product, represent a price given by a combination of fare elements.'
      mediaType:
        type: string
        description: >
          Media Type Code.
          Possible values:
            * HCE: Host Card Emulation
            * SC: Smart Card
            * PPR: Paper
            * PPRS: Pre Printed
            * MOB: Mobile
            * VT: Virtual Ticket
            * CP: Chip on Paper
            * EMV: EMV
            * CIE: Carta Identità Elettronica
            * CNS: Carta Nazionale Servizi
        enum: [ HCE, SC, PPR, PPRS, MOB, VT, CP, EMV, CIE, CNS ]
        example: HCE
      validityPeriodId:
        type: string
        description: "Identifier of USAGE VALIDITY PERIOD."
        example: '2c8b317e-a462-11e8-af67-37c61bc0a4a7'
      fareZoneId:
        type: "string"
        description: 'Unique fare zone identifier'
      geographicalId:
        type: string
        description: 'Identifier of GEOGRAPHICAL INTERVAL.'
        example: 'D.0.50'
      distributionTouchpointType:
        type: string
        description: 'Code type of distribution touchpoint.'
        example: 'TVM'
      distributionTouchpointId:
        type: string
        description: "Identifier of a DISTRIBUTION TOUCHPOINT/CHANNEL."
        example: '317d58cd-af76-11e8-8e23-d7566f1d5818'
      serviceId:
        type: string
        description: 'Identifier of Service.'
        example: 'SR.TM.UBRAIL'
      customerProfileId:
        type: string
        description: 'Identifier of Customer PROFILE.'
        example: 'CP.SPN'
      temporalValidityId:
        type: string
        description: "Identifier of Temporal Validity."
        example: 'DT_01-MF-NH'
      promotionAssignmentId:
        description: "Identifier of a  Promotion ASSIGNMENT"
        type: string
        example: "xxxx.xxxx"
      quantity:
        type: integer
        example: 2

  BasketCart:
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/BasketItem'

  BasketPriceItem:
    type: object
    required:
      - itemId
      - itemName
      - itemVersion
      - fareTableCellId
      - quantity
      - ccy
      - amount
    properties:
      itemId:
        type: string
        format: uuid
        description: 'Product or SalesPackage unique identifier.'
        example: '93c80f89-dd00-4a06-bd7e-5ba1a970cc4c'
      itemName:
        type: string
        description: 'Product or SalesPackage name.'
      itemVersion:
        type: integer
        description: 'Product or SalesPackage version.'
        example: 1
      fareTableCellId:
        type: "string"
        description: 'Identifier of a Cell of Fare Table of a Product, represent a price given by a combination of fare elements.'
      quantity:
        type: integer
        example: 2
      ccy:
        type: string
        description: "currency Code ISO 4217."
        example: "EUR"
      amount:
        type: number
        description: 'The amount of the product.'
        example: '12.5'

  BasketPrice:
    type: object
    required:
      - totalAmount
      - ccy
    properties:
      totalAmount:
        type: number
        description: 'The total amount of the basket.'
        example: '12.5'
      ccy:
        type: string
        description: "currency Code ISO 4217."
        example: "EUR"
      items:
        type: array
        items:
          $ref: '#/definitions/BasketPriceItem'

  TopUpAllowableAmount:
    type: object
    properties:
      value:
        type: number
        description: ''
        example: '12.5'
      startDate:
        type: string
        format: date
        description: ""
        example: '2018-09-04'
      endDate:
        type: string
        format: date
        description: ""
        example: '2018-09-04'

  ChargeLimitData:
    type: object
    properties:
      epurse:
        type: object
        $ref: '#/definitions/Epurse'
      monthly:
        type: object
        $ref: '#/definitions/Threshold'
      weekly:
        type: object
        $ref: '#/definitions/Threshold'
      daily:
        type: object
        $ref: '#/definitions/Threshold'


  Threshold:
    type: object
    properties:
      platfond:
        type: number
        description: ''
        example: '12.5'
      residual:
        type: number
        description: ''
        example: '12.5'


  Epurse:
    type: object
    properties:
      epurseId:
        type: string
        description: ''
        example: 'd06e1f4e-62fc-41c7-a868-d014baae5130'
      ownerId:
        type: string
        description: ""
        example: ''
      ownerType:
        $ref: '#/definitions/OwnerTypeEnum'
      status:
        $ref: '#/definitions/EpurseStatusEnum'
      openDate:
        type: string
        format: date
        description: ""
        example: '2018-09-04'
      closeDate:
        type: string
        format: date
        description: ""
        example: '2018-09-04'
      summary:
        type: object
        $ref: '#/definitions/CurrentSummary'
      epurseDetail:
        type: object
        $ref: '#/definitions/EpurseDetail'

  EpurseDetail:
    type: object
    properties:
      transactions:
        type: array
        items:
          $ref: '#/definitions/TransactionsApi'
      lists:
        type: array
        items:
          $ref: '#/definitions/ListLog'

  CurrentSummary:
    type: object
    properties:
      epurseId:
        type: string
        description: ''
        example: 'd06e1f4e-62fc-41c7-a868-d014baae5130'
      accountBalance:
        type: number
        description: ''
        example: '12.5'
      availableBalance:
        type: number
        description: ''
        example: '12.5'
      dateBalance:
        type: string
        format: date
        description: ""
        example: '2018-09-04'

  Transactions:
    type: object
    properties:
      transactionId:
        type: string
        description: ''
        example: 'd06e1f4e-62fc-41c7-a868-d014baae5130'
      codTransactionType:
        $ref: '#/definitions/TransactionTypeEnum'
      note:
        type: string
        description: ''
        example: ''
      refExternalTransaction:
        type: string
        description: ""
        example: ''
      transactionResult:
        $ref: '#/definitions/TransactionResultTypeEnum'
      token:
        type: string
        description: ""
        example: ''
      codInvoice:
        type: string
        example: "Code-40c1-4e71-8207-843e0a6082fc"
        description: cod invoice of transaction
      workshiftId:
        type: string
        example: "Code-40c1-4e71-8207-843e0a6082fc"
        description: Reference work Shift.

  TransactionCharge:
    allOf:
      - $ref: '#/definitions/Transactions'
    type: object
    properties:
      amount:
        type: number
        format: float
        description: '12.5'
      ccy:
        type: string
        description: 'EUR'


  TransactionTopUp:
    allOf:
      - $ref: '#/definitions/Transactions'
    type: object
    properties:
      amount:
        type: number
        format: float
        description: 'Total amount.'
        example: '12.5'
      ccy:
        type: string
        description: 'Causal of the transaction.'
      creditAmount:
        type: number
        format: float
        description: 'Is the credit amount used to top-up.'
        example: '12.5'
      paymentMethod:
        $ref: '#/definitions/PaymentTypeEnum'
      creditNotes:
        type: string
        description: 'Credit notes.'
      numDiscountPerc:
        type: number
        format: float
        example: '12.5'
      numDiscountAmount:
        type: number
        format: float
        example: '12.5'
      strDiscountNotes:
        type: string
        description: 'Credit notes.'

  ListLog:
    type: object
    properties:
      listLogID:
        type: string
        description: ''
        example: 'd06e1f4e-62fc-41c7-a868-d014baae5130'
      codInsertionType:
        $ref: '#/definitions/ListInsertionTypeEnum'
      codListType:
        $ref: '#/definitions/ListTypeEnum'
      note:
        type: string
        description: ""
        example: ''
      codStatus:
        $ref: '#/definitions/StatusListEnum'

  TransactionsApi:
    type: object
    properties:
      transactionId:
        type: string
        description: ''
        example: 'd06e1f4e-62fc-41c7-a868-d014baae5130'
      epurseId:
        type: string
        description: ''
        example: 'd06e1f4e-62fc-41c7-a868-d014baae5130'
      codTransactionType:
        $ref: '#/definitions/TransactionTypeEnum'
      transactionDate:
        type: string
        format: date
        example: '2022-07-18'
      note:
        type: string
        description: ''
        example: ''
      extCodTransaction:
        type: string
        description: ""
        example: ''
      codInvoice:
        type: string
        example: "Code-40c1-4e71-8207-843e0a6082fc"
        description: cod invoice of transaction
      workshiftId:
        type: string
        example: "Code-40c1-4e71-8207-843e0a6082fc"
        description: Reference work Shift.
      transactionResult:
        $ref: '#/definitions/TransactionResultTypeEnum'
      transactionsTopup:
        $ref: '#/definitions/TransactionsTopUpApi'
      transactionsCharge:
        $ref: '#/definitions/TransactionsChargeApi'


  TransactionsTopUpApi:
    type: object
    properties:
      id:
        type: string
        description: ''
        example: 'd06e1f4e-62fc-41c7-a868-d014baae5130'
      numAmount:
        type: number
        example: '12.5'
      ccyCode:
        type: string
        example: 'EUR'
      refExternalTransaction:
        type: string
        description: ''
        example: ''
      codPaymentMethod:
        type: string
        description: ""
        example: ''
      numCreditAmount:
        type: number
        example: '12.5'
      strCreditNotes:
        type: string
      numDiscountPerc:
        type: number
        example: '12.5'
      numDiscountAmount:
        type: number
        example: '12.5'
      strDiscountNotes:
        type: string

  TransactionsChargeApi:
    type: object
    properties:
      id:
        type: string
        description: ''
        example: 'd06e1f4e-62fc-41c7-a868-d014baae5130'
      numAmount:
        type: number
        example: '12.5'
      ccyCode:
        type: string
        example: 'EUR'



  TouchpointReseller:
    type: object
    properties:
      touchpointId:
        type: string
      organizationSellerId:
        type: string

  TransactionTopUpResponse:
    type: object
    properties:
      epurseId:
        type: string
        description: "E-purse identifier"
      refPartyOwner:
        type: string
        description: "Owner identifier"
      codStatus:
        type: string
        description: "E-purse status"
      codOwnerType:
        type: string
        description: "Owner type"
      workstationUpdate:
        type: string
      operatorUpdate:
        type: string
      codSource:
        type: string
      epurseType:
        type: string
      transactionId:
        type: string
        description: "Transaction identifier"
      codTransactionType:
        type: string
      note:
        type: string
      refExternalTransaction:
        type: string
      transactionResult:
        type: string
        description: "Result of the transaction top-up"
      token:
        type: string
      amount:
        type: number
        format: decimal
        description: 'Amount'
        example: '12.0'
      ccy:
        type: string
        description: ""
        example: 'EUR'
      creditAmount:
        type: number
        format: decimal
        description: 'Is the credit amount used to top-up '
        example: '12.0'
      paymentMethod:
        $ref: '#/definitions/PaymentTypeEnum'
      creditNotes:
        type: string
        description: ""
      numDiscountPerc:
        type: number
        format: decimal
        description: 'Is the discount PERCENT used to top-up'
        example: '12.0'
      numDiscountAmount:
        type: number
        format: decimal
        description: 'Is the discount amount used to top-up '
        example: '12.0'
      strDiscountNotes:
        type: string
        description: "discount Notes"

  Transaction:
    type: object
    discriminator: transactionType
    required:
      - transactionType
    properties:
      codTransaction:
        type: string
        description: Transaction unique identifier
        example: '880e421c-0b7d-4209-8d2c-19dc38a42d95'
      transactionResult:
        type: string
        description: Transaction result code.
        example: 'SCS'
        enum:
          - SCS
          - ERR
          - WRN
      transactionType:
        type: string
        enum:
          - ISS
          - VLD
          - ISP
          - PRC
          - CXL
          - PPC
          - EXP
          - RFD
          - CCM
        description: Transaction type code. E.g. ISS (Issuing), VLD (Validation), ISP (Inspection), PRC (Purchase), CXL (Cancel), PPC (PrePurchase), EXP (Expiry), RFD (Refund), CCM (Change Compensation). It must be equal to kind of transaction object sent.
        example: ISS
      transactionTime:
        type: string
        format: date-time
        example: '2018-10-26T07:30:00.000'
        description: Date of transaction.
      customerId:
        type: string
        description: Customer unique identifier.
      extCodTransaction:
        type: string
        example: "Ext_Code-40c1-4e71-8207-843e0a6082fc"
        description: Transaction external code
      fareProductType:
        type: string
        enum:
          - TKTBASED
          - ACCBASED
        description: Fare Product Type. E.g. TKTBASED (Ticket based), ACCBASED (Account Based).
        example: TKTBASED
      infrastructureElements:
        type: array
        description: This list contains infrastructure elements as touchpoint, device, stop point or line.
        items:
          $ref: '#/definitions/InfrastructureElement'
      relatedTransactions:
        type: array
        description: This list contains optional related transaction elements.
        items:
          $ref: '#/definitions/CodeTypeElement'
      workshiftId:
        type: string
        description: Workshift unique identifier
      notes:
        type: string
        description: Notes about transaction
      extraData:
        type: string
        description: ExtraData (available for external systems like MaaS)
  CodeTypeElement:
    type: object
    properties:
      code:
        type: string
      type:
        type: string

  MissingPayoutChange:
    type: object
    properties:
      missingPayoutChange:
        type: number
        example: '12.5'
      note:
        type: string

  OwnerTypeEnum:
    type: string
    description: "Reference to a Owner Type"
    enum: [ CUSTOMER, RESELLER ]

  EpurseStatusEnum:
    type: string
    description: "Reference to a Epurse status"
    enum: [ OPEN, CLOSED ]

  TransactionTypeEnum:
    type: string
    description: "Reference to a Transaction type"
    enum: [ TOP-UP, CHARGE, PRE-AUTHORIZATION ]

  TransactionResultTypeEnum:
    type: string
    description: "Reference to a Transaction result type"
    enum: [ ERROR, SUCCESS ]

  ListInsertionTypeEnum:
    type: string
    description: "Reference to a List insertion type"
    enum: [ BLOCKED, SUSPENDED ]

  ListTypeEnum:
    type: string
    description: "Reference to a List type"
    enum: [ BLACK, WHITE ]

  StatusListEnum:
    type: string
    description: "Reference to a List status"
    enum: [ INSERTED, REMOVED ]

  FareTrip:
    required:
      - tripId
      - bestFare
    type: object
    properties:
      tripId:
        type: string
        example: 'abcdef-012345'
        format: "string"
        description: 'Identification of a specified trip passed from channels.'
      bestFare:
        $ref: '#/definitions/BestFare'

  BestFare:
    required:
      - legsBlocks
      - tripPrice
      - ccyPrice
    type: object
    description: 'The best fare found for the Trip example: (SP1 + SP2) + SP4 + SP5'
    properties:
      legsBlocks:
        type: array
        description: 'Legs block list (each element can contain single or multiple leg)'
        items:
          $ref: '#/definitions/LegsBlock'
      tripPrice:
        example: '5.5€'
        description: 'The total cost of the trip'
        type: number
      ccyPrice:
        type: string
        description: "currency Code ISO 4217."
        example: 'EUR'

  LegDataEnum:
    type: string
    description: |
      Allowed values for legData type TRMOB( move with Transport ), PMOB( private mobility), SHARE ( move with transport sharing)
        * TRMOB
        * PMOB
        * SHARE
    enum:
      - TRMOB
      - PMOB
      - SHARE

  LegsBlock:
    allOf:
      - $ref: "#/definitions/LiteLegsBlock"
      - type: object
        required:
          - legsId
          - legsBlockPrice
          - ccyPriceBlock
        properties:
          legsBlockPrice:
            example: '1.5€'
            description: 'The leg block cost'
            type: number
          ccyPriceBlock:
            type: string
            description: "currency Code ISO 4217. (for the block)"
            example: 'EUR'

  TripProducts:
    required:
      - tripId
      - liteLegsBlock
    type: object
    properties:
      tripId:
        type: string
        example: 'abcdef-012345'
        format: "string"
        description: 'Identification of a specified trip products passed from channels.'
      liteLegsBlock:
        $ref: '#/definitions/LiteLegsBlock'

  LiteLegsBlock:
    required:
      - legsId
    type: object
    properties:
      legsId:
        type: array
        description: 'The ids of legs in the block '
        items:
          type: string
      fareProducts:
        type: array
        description: "List of identifier of Fare products of the leg"
        items:
          $ref: '#/definitions/Product'
      salesPackages:
        type: array
        description: 'List of identifier of Sales package of the leg'
        items:
          $ref: '#/definitions/SalesPackage'

  FineNotification:
    type: object
    properties:
      fineId:
        type: string
        format: uuid
        example: '2bb303b7-ea78-485e-bf85-953fe6c65928'
        description: 'Fine unique identifier.'
      dateOfNotification:
        type: string
        format: date-time
        example: '2022-07-07T19:02:28Z'
        description: 'Fine notification date.'
      inspectorDesc:
        type: string
        description: 'TICKET INSPECTOR is the persons authorised  to Inspection of tickets in public transport vehicles.'
      inspectorCode:
        type: string
        description: 'Code of TICKET INSPECTOR'
      mainIndividual:
        $ref: '#/definitions/IndividualWithRelation'
      finePaymentStatus:
        $ref: '#/definitions/FinePaymentStatus'
      typeOfInfringementId:
        type: string
        format: uuid
        example: '2bb303b7-ea78-485e-bf85-953fe6c65928'
        description: 'Type of infringement unique identifier.'
      flagNotified:
        type: number
        format: integer
        description: 'Notification type (Notified or Not notified)'
      inspectorNote:
        type: string
        description: 'The note of inspector'
      offenderStatements:
        type: string
        description: 'The statements of offender'
      inspectionTransactionReference:
        type: string
        description: 'The inspection transaction refence'
      statusCode:
        $ref: '#/definitions/NotificationStatusEnum'
      servicesAffected:
        $ref: '#/definitions/ServicesAffected'
      ticketPrice:
        type: number
        format: decimal
        example: '3.50'
        description: 'Ticket cost imputed by the controller if the type has the flag settled a true.'
      currencyCode:
        type: string
        description: 'The currency code'
      ticketInspectorReference:
        type: string
        description: 'The inspector ticket refence'
      workshiftReference:
        type: string
        description: 'The workshift refence'
      touchpointReference:
        type: string
        description: 'The touchpoint refence'
      touchpointType:
        $ref: '#/definitions/TouchpointEnum'
      infringementCost:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/InfringementCost'

  Individual:
    type: object
    required:
      - dateOfBirth
      - partyNamePart1
      - partyNamePart3
    description: 'Data of the individual. The primary individual is the offender. The secondary individual is the guardian/parent of the offender (present only if the offender is a minor).'
    properties:
      individualId:
        type: string
        format: uuid
        example: '2bb303b7-ea78-485e-bf85-953fe6c65928'
        description: 'Individual unique identifier.'
      dateOfBirth:
        type: string
        format: date
        example: '2022-07-07'
        description: 'The birth date of individual.'
      legalSexType:
        type: string
        description: 'Legal Sex Type'
      language:
        type: string
        description: 'Language'
      nationalCountryCode:
        type: string
        description: 'National Identity Country. ISO 3166-1 alfa -3'
      taxCode:
        type: string
        description: 'Tax Code'
      nationalCountryDesc:
        type: string
        description: 'Description National Country'
      partyNamePart1:
        type: string
        description: 'Party Name. For the individual is the First Name.  For organization is the denomination.'
      partyNamePart2:
        type: string
        description: 'Party Name. For the individual is the Midle name.'
      partyNamePart3:
        type: string
        description: 'Party Name. For the individual is the Surname.'
      addresses:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/Address'
      emails:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/Email'
      phones:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/Phone'
      documents:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/Document'

  IndividualWithRelation:
    type: object
    description: 'Data of the individual. The primary individual is the offender. The secondary individual is the guardian/parent of the offender (present only if the offender is a minor).'
    properties:
      individualId:
        type: string
        format: uuid
        example: '2bb303b7-ea78-485e-bf85-953fe6c65928'
        description: 'Individual unique identifier.'
      dateOfBirth:
        type: string
        format: date
        example: '2022-07-07'
        description: 'The birth date of individual.'
      legalSexType:
        type: string
        description: 'Legal Sex Type'
      language:
        type: string
        description: 'Language'
      nationalCountryCode:
        type: string
        description: 'National Identity Country. ISO 3166-1 alfa -3'
      taxCode:
        type: string
        description: 'Tax Code'
      nationalCountryDesc:
        type: string
        description: 'Description National Country'
      partyNamePart1:
        type: string
        description: 'Party Name. For the individual is the First Name.  For organization is the denomination.'
      partyNamePart2:
        type: string
        description: 'Party Name. For the individual is the Midle name.'
      partyNamePart3:
        type: string
        description: 'Party Name. For the individual is the Surname.'
      addresses:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/Address'
      emails:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/Email'
      phones:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/Phone'
      documents:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/Document'
      relations:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/Relation'

  SecondaryIndividual:
    type: object
    description: 'Data of the individual. The primary individual is the offender. The secondary individual is the guardian/parent of the offender (present only if the offender is a minor).'
    properties:
      individualId:
        type: string
        format: uuid
        example: '2bb303b7-ea78-485e-bf85-953fe6c65928'
        description: 'Individual unique identifier.'
      dateOfBirth:
        type: string
        format: date
        example: '2022-07-07'
        description: 'The birth date of individual.'
      legalSexType:
        type: string
        description: 'Legal Sex Type'
      language:
        type: string
        description: 'Language'
      nationalCountryCode:
        type: string
        description: 'National Identity Country. ISO 3166-1 alfa -3'
      taxCode:
        type: string
        description: 'Tax Code'
      nationalCountryDesc:
        type: string
        description: 'Description National Country'
      partyNamePart1:
        type: string
        description: 'Party Name. For the individual is the First Name.  For organization is the denomination.'
      partyNamePart2:
        type: string
        description: 'Party Name. For the individual is the Midle name.'
      partyNamePart3:
        type: string
        description: 'Party Name. For the individual is the Surname.'
      addresses:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/Address'
      emails:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/Email'
      phones:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/Phone'
      documents:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/Document'
      relations:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/Relation'

  RelationTypeEnum:
    type: string
    description: |
      Present only if the main individual is a minor. Indicates the type of relationship between the main individual and the secondary individual.
      Allowed values for relation type.
        * LEGAL GUARDIAN
        * FATHER
        * MOTHER
        * OTHER
    enum:
      - LEGAL GUARDIAN
      - FATHER
      - MOTHER
      - OTHER

  FinePaymentStatus:
    type: object
    properties:
      fineId:
        type: string
        example: '2bb303b7-ea78-485e-bf85-953fe6c65928'
        description: 'Fine unique identifier.'
      typePaymentCode:
        type: string
        description: The type of payment code
      paymentDate:
        type: string
        format: date-time
        example: '2022-07-07T19:02:28Z'
        description: 'The Payment date.'
      paymentStatusCode:
        $ref: '#/definitions/PaymentStatusEnum'
      paymentAmount:
        type: number
        format: decimal
        example: '30.50'
        description: 'Payment amount'
      paymentReference:
        type: string
        description: 'Payment reference'
      paymentInstitutionDesc:
        type: string
        description: 'Description of External payment institution'
      flagIsExternal:
        type: number
        format: integer
        description: 'Indicates if the payment is made through an external system. 1 if true, 0 if false'
      currency:
        type: string
        description: 'Currency'

  NotificationStatusEnum:
    type: string
    description: |
      Allowed values for payment status.
        * ISSUED
        * CONTESTED
        * CANCELED
    enum:
      - ISSUED
      - CONTESTED
      - CANCELED

  ServicesAffected:
    type: object
    required:
      - serviceTypeCode
    properties:
      servicesAffectedId:
        type: string
        format: uuid
        example: '2bb303b7-ea78-485e-bf85-953fe6c65928'
        description: 'Service affected unique identifier.'
      serviceTypeCode:
        $ref: '#/definitions/ServiceTypeEnum'
      serviceCode:
        type: string
        description: 'Service Code'
      serviceDesc:
        type: string
        description: 'Service Name'
      vehicleJourneyReference:
        type: string
        description: 'Vehicle Journey Reference'
      vehicleJourneyDesc:
        type: string
        description: 'Vehicle Journey Name'
      startPointReference:
        type: string
        description: 'Start Point Reference'
      startPointDesc:
        type: string
        description: 'Start Point Name'
      endPointReference:
        type: string
        description: 'End Point Reference'
      endPointDesc:
        type: string
        description: 'End Point Name'

  Address:
    allOf:
      - $ref: '#/definitions/Contact'
    type: object
    properties:
      addressLine1:
        type: string
        description: 'Address Line 1'
      addressLine2:
        type: string
        description: 'Address Line 2'
      addressLine3:
        type: string
        description: 'Address Line 3'
      postalCode:
        type: string
        description: 'Postal code'
      addressTypeCode:
        $ref: '#/definitions/PostalAddressTypeEnum'
      countryCode:
        type: string
        description: 'Country Code. ISO 3166-1 alfa -3'
      location:
        $ref: '#/definitions/Location'
      contactName:
        type: string
        description: 'Contact name'
      contactNumber:
        type: string
        description: 'Contact number'
      countryDesc:
        type: string
        description: 'Country name'
      cityCode:
        type: string
        description: 'City code'
      cityDesc:
        type: string
        description: 'City name'
      districtCode:
        type: string
        description: 'District code'

  Contact:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: '2bb303b7-ea78-485e-bf85-953fe6c65928'
        description: 'Unique identifier.'
      contactTypeCode:
        $ref: '#/definitions/ContactTypeEnum'
      activationDate:
        type: string
        format: date-time
        example: '2022-07-07T19:02:28Z'
        description: 'The activation date.'
      closingDate:
        type: string
        format: date-time
        example: '2022-07-07T19:02:28Z'
        description: 'The closing date.'
      isPrimary:
        type: number
        format: integer
        description: '1 if primary, 0 if not primary'

  Email:
    allOf:
      - $ref: '#/definitions/Contact'
    type: object
    properties:
      emailAddress:
        type: string
        description: 'The email Address'
      typeCode:
        $ref: '#/definitions/PostalAddressTypeEnum'

  Phone:
    allOf:
      - $ref: '#/definitions/Contact'
    type: object
    properties:
      phoneNumber:
        type: string
        description: 'The phone number'
      phoneTypeCode:
        $ref: '#/definitions/PostalAddressTypeEnum'

  PostalAddressTypeEnum:
    type: string
    description: |
      Allowed values for contact type.
        * MAIL
        * HOME
        * WORK
        * RESIDENCE
        * BILLING
    enum:
      - MAIL
      - HOME
      - WORK
      - RESIDENCE
      - BILLING

  ServiceTypeEnum:
    type: string
    description: |
      Allowed values for contact type.
        * BUS
        * METRO
        * TRAIN
        * OTHER
    enum:
      - BUS
      - METRO
      - TRAIN
      - OTHER

  Document:
    type: object
    properties:
      documentId:
        type: string
        format: uuid
        example: '2bb303b7-ea78-485e-bf85-953fe6c65928'
        description: 'Document unique identifier.'
      documentTitle:
        type: string
        description: 'Title of the Document'
      flagVerified:
        type: number
        format: integer
        description: '1 if it is verified, 0 if it is not verified'
      documentTypeCode:
        $ref: '#/definitions/DocumentTypeEnum'
      statusCode:
        type: string
        description: 'Status code'
      documentNumber:
        type: string
        description: 'The number of the Document'
      issuedBy:
        type: string
        description: 'Authority which issued the document'
      dateOfIssue:
        type: string
        format: date
        example: '2022-07-07'
        description: 'The Date of issue'
      dateOfExpiry:
        type: string
        format: date
        example: '2022-07-07'
        description: 'The Date of Expiry'

  Relation:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: '2bb303b7-ea78-485e-bf85-953fe6c65928'
        description: 'Relation unique identifier.'
      secondaryIndividual:
        allOf:
          - $ref: '#/definitions/SecondaryIndividual'
      relationType:
        $ref: '#/definitions/RelationTypeEnum'

  DocumentTypeEnum:
    type: string
    description: |
      Allowed values for document type.
        * PASSPORT
        * DRIVERLICENSE
        * IDENTITYCARD
        * OTHER
    enum:
      - PASSPORT
      - DRIVERLICENSE
      - IDENTITYCARD
      - OTHER

  PaymentStatusEnum:
    type: string
    description: |
      Allowed values for payment status.
        * PAYED
        * DISPUTE
        * NOTPAYED
        * OTHER
    enum:
      - PAYED
      - DISPUTE
      - NOTPAYED
      - OTHER

  ContactTypeEnum:
    type: string
    description: |
      Allowed values for contact type.
        * EMAIL
        * ADDRESS
        * PHONE
    enum:
      - EMAIL
      - ADDRESS
      - PHONE

  TypeOfInfringement:
    type: object
    properties:
      typeOfInfringementId:
        type: string
        format: uuid
        example: '2bb303b7-ea78-485e-bf85-953fe6c65928'
        description: 'Type of infringement unique identifier.'
      typeOfInfringementDescription:
        type: string
        description: 'Type of infringement description'
      productReference:
        type: string
        description: 'The product reference'
      startValidityDate:
        type: string
        format: date-time
        example: '2022-07-07T19:02:28Z'
        description: 'The start validity date.'
      endValidityDate:
        type: string
        format: date-time
        example: '2022-07-07T19:02:28Z'
        description: 'The end validity date.'

  InfringementCost:
    type: object
    properties:
      penaltyAmount:
        type: number
        format: decimal
        example: '30.50'
        description: 'Penalty amount'
      startValidityDate:
        type: string
        format: date-time
        example: '2022-07-07T19:02:28Z'
        description: 'The start validity date.'
      endValidityDate:
        type: string
        format: date-time
        example: '2022-07-07T19:02:28Z'
        description: 'The end validity date.'
      numberOfPaidDaysWithin:
        type: number
        format: integer
        example: '2'
        description: 'If the sanction/FINE is paid within x days of the dispute or notification. If set to 0 means "If paid at the time of the dispute by the investigating staff"'
      flagPlusTicket:
        type: number
        format: integer
        description: 'Flag plus Ticket. Add to the FINE the cost of Ticket. 1 if true, 0 if false'
      costsOfProceedings:
        type: number
        format: decimal
        example: '1.50'
        description: 'Costs of proceedings'
      currencyCode:
        type: string
        example: 'EUR'
        description: 'The currency code'

  TouchpointEnum:
    type: string
    description: |
      Allowed values for touchpoint type.
        * DEVICE
    enum:
      - DEVICE

  FineInsertInput:
    type: object
    required:
      - dateOfNotification
      - mainIndividual
      - typeOfInfringementId
      - servicesAffected
      - ticketInspectorReference
      - touchpointReference
    properties:
      fineId:
        type: string
        format: uuid
        example: '2bb303b7-ea78-485e-bf85-953fe6c65928'
        description: 'Fine unique identifier.'
      dateOfNotification:
        type: string
        format: date-time
        example: '2022-07-07T19:02:28Z'
        description: 'Fine notification date.'
      inspectorDesc:
        type: string
        description: 'TICKET INSPECTOR is the persons authorised  to Inspection of tickets in public transport vehicles.'
      inspectorRoleCode:
        type: string
        description: 'ROLE of TICKET INSPECTOR'
      mainIndividual:
        $ref: '#/definitions/Individual'
      relationType:
        $ref: '#/definitions/RelationTypeEnum'
      secondaryIndividual:
        $ref: '#/definitions/Individual'
      typeOfInfringementId:
        type: string
        format: uuid
        example: '2bb303b7-ea78-485e-bf85-953fe6c65928'
        description: 'Type of infringement unique identifier.'
      flagNotified:
        type: boolean
        description: 'Notification type (Notified or Not notified)'
      inspectorNote:
        type: string
        description: 'The note of inspector'
      offenderStatements:
        type: string
        description: 'The statements of offender'
      inspectionTransactionReference:
        type: string
        description: 'The inspection transaction refence'
      statusCode:
        $ref: '#/definitions/NotificationStatusEnum'
      servicesAffected:
        $ref: '#/definitions/ServicesAffected'
      ticketPrice:
        type: number
        format: decimal
        example: '3.50'
        description: 'Ticket cost imputed by the controller if the type has the flag settled a true.'
      currencyCode:
        type: string
        description: 'The currency code'
      ticketInspectorReference:
        type: string
        description: 'The inspector ticket refence'
      workshiftReference:
        type: string
        description: 'The workshift refence'
      touchpointReference:
        type: string
        description: 'The touchpoint refence'
      touchpointType:
        $ref: '#/definitions/TouchpointEnum'

  FineCostData:
    type: object
    properties:
      amount:
        type: number
        format: decimal
        example: '3.50'
        description: 'Amount'
      currency:
        type: string
        example: 'EUR'
        description: 'Currency'

  FinePaymentData:
    type: object
    required:
      - fineId
      - paymentAmount
      - ccy
      - paymentType
      - workShiftId
      - paymentDate
    properties:
      fineId:
        type: string
        example: '2bb303b7-ea78-485e-bf85-953fe6c65928'
        description: 'Fine unique identifier.'
      externalTransactionCode:
        type: string
        description: 'External code of the transaction'
      paymentAmount:
        type: number
        format: decimal
        example: '30.50'
        description: 'Payment amount'
      ccy:
        type: string
        description: 'Code currency. ISO format - 3 characters'
      paymentType:
        $ref: '#/definitions/PaymentTypeEnum'
      codGateway:
        $ref: '#/definitions/PaymentGatewayType'
      workShiftId:
        type: string
        description: 'WorkShift Id'
      paymentDate:
        type: string
        format: date-time
        example: '2022-07-07T19:02:28Z'
        description: 'The Payment date.'
      cashAmountEntered:
        type: number
        format: decimal
        example: '10.20'
        description: 'The total amount entered for the payment of the fine.'
      changeValue:
        type: number
        format: decimal
        example: '0.6'
        description: 'the remainder due by the payment of the fine.'
      payoutChange:
        type: number
        format: decimal
        example: '0.6'
        description: 'The rest disbursed by the payment of the fine.'
      missingPayoutChange:
        type: number
        format: decimal
        example: '30.50'
        description: 'Missing payout change'